dnl Process this file with autoconf to produce a configure script.

dnl----------------------------------------------------------
dnl configure.in for EEL - David Olofson, 2003-2012
dnl Some tests stolen from SDL (http://www.libsdl.org)
dnl----------------------------------------------------------

AC_INIT(Makefile.am)

dnl----------------------------------------------------------
dnl Release + library versioning - stolen from SDL_image
dnl----------------------------------------------------------
dnl Making releases:
dnl   MICRO_VERSION += 1;
dnl   INTERFACE_AGE += 1;
dnl   BINARY_AGE += 1;
dnl if any functions have been added, set INTERFACE_AGE to 0.
dnl if backwards compatibility has been broken,
dnl set BINARY_AGE and INTERFACE_AGE to 0.
dnl
dnl----------------------------------------------------------
dnl Note that version.h is generated automatically, with
dnl the right version number! Just edit here and rebuild.
dnl----------------------------------------------------------

EEL_MAJOR_VERSION=0
EEL_MINOR_VERSION=3
EEL_MICRO_VERSION=7
EEL_SNAPSHOT=0
EEL_INTERFACE_AGE=4
EEL_BINARY_AGE=4
EEL_VERSION=$EEL_MAJOR_VERSION.$EEL_MINOR_VERSION.$EEL_MICRO_VERSION

AC_SUBST(EEL_MAJOR_VERSION)
AC_SUBST(EEL_MINOR_VERSION)
AC_SUBST(EEL_MICRO_VERSION)
AC_SUBST(EEL_SNAPSHOT)
AC_SUBST(EEL_INTERFACE_AGE)
AC_SUBST(EEL_BINARY_AGE)
AC_SUBST(EEL_VERSION)

dnl Just in case someone looks in the wrong place.
AUTO_MESSAGE="    ==> DO NOT EDIT! Automatically generated by configure.in."
AC_SUBST(AUTO_MESSAGE)


dnl----------------------------------------------------------
dnl libtool versioning
dnl----------------------------------------------------------

LT_RELEASE=$EEL_MAJOR_VERSION.$EEL_MINOR_VERSION
LT_CURRENT=`expr $EEL_MICRO_VERSION - $EEL_INTERFACE_AGE`
LT_REVISION=$EEL_INTERFACE_AGE
LT_AGE=`expr $EEL_BINARY_AGE - $EEL_INTERFACE_AGE`

AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)


dnl----------------------------------------------------------
dnl Detect canonical host and target build environment
dnl----------------------------------------------------------
AC_CANONICAL_HOST
AC_CANONICAL_TARGET


dnl----------------------------------------------------------
dnl autoconf and automake initialization
dnl----------------------------------------------------------

AM_INIT_AUTOMAKE(EEL, $EEL_VERSION, david@olofson.net)
AM_CONFIG_HEADER(config.h)


dnl-------------------------------------------------------
dnl Checks for tools.
dnl-------------------------------------------------------
AC_CONFIG_MACRO_DIR([m4])
AC_PROG_MAKE_SET
AC_PROG_CC
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL
AC_SUBST(LIBTOOL_DEPS)
AC_PROG_INSTALL


dnl-------------------------------------------------------
dnl Init compile and link flags for apps using EEL
dnl-------------------------------------------------------
EEL_CFLAGS=""
EEL_LDFLAGS=""
EEL_LIBS="-lEEL"


dnl-------------------------------------------------------
dnl Checks for some C stuff.
dnl-------------------------------------------------------
AC_C_INLINE
dnl Get the result of AC_C_INLINE into EEL_version.h, to allow
dnl EEL headers and application code to use 'inline'.
case $ac_cv_c_inline in
	inline | yes)
		EEL_PLATFORM_INLINE=""
		;;
	no)
		EEL_PLATFORM_INLINE="#define	inline"
		;;
	*)
		EEL_PLATFORM_INLINE="#define	inline	$ac_cv_c_inline"
		;;
esac
AC_SUBST(EEL_PLATFORM_INLINE)
AC_C_CONST
AC_TYPE_SIGNAL
RRA_C_C99_VAMACROS
RRA_C_GNU_VAMACROS


dnl-------------------------------------------------------
dnl Checks for header files.
dnl-------------------------------------------------------
AC_HEADER_STDC
AC_CHECK_HEADERS(errno.h fcntl.h string.h setjmp.h)


dnl-------------------------------------------------------
dnl Checks for library functions.
dnl-------------------------------------------------------
AC_CHECK_FUNCS(strdup strstr strchr strrchr snprintf _snprintf)
AC_CHECK_FUNCS(pow sqrt)
AC_CHECK_FUNCS(atexit floor memmove memset memcmp)
AC_CHECK_FUNCS(gettimeofday)
AC_CHECK_FUNCS(_setjmp _longjmp setjmp longjmp sigsetjmp siglongjmp)
AC_PROG_GCC_TRADITIONAL

dnl-------------------------------------------------------
dnl Check if we should support dynamic binary modules
dnl-------------------------------------------------------
AC_ARG_ENABLE(modules,
[  --enable-modules        Enable dynamic binary modules @<:@default=no@:>@],
                  , enable_modules=no)
if test x$enable_modules = xyes; then
	AC_DISABLE_STATIC
fi
if test x$enable_static = xyes -a x$enable_modules = xyes; then
       AC_MSG_ERROR([
***********************************************************************
*** Trying to build with --enable-static as well as --enable-modules!
***
*** It is strongly recommended to NOT use dynamic binary modules with
*** a statically linked EEL core! Modules need to link with EEL, and
*** as a result, if a module is loaded into an application that has
*** EEL statically linked, the module will pull in another instance of
*** EEL, and Bad Things(TM) are likely to happen.
***********************************************************************
       ])
fi
if test x$enable_modules = xyes; then
	EEL_CFLAGS="$EEL_CFLAGS -DEEL_HAVE_MODULES"
	EEL_BUILD_FLAGS="$EEL_BUILD_FLAGS | EEL_BUILD_MODULES"
fi

dnl @synopsis AC_DEFINE_DIR(VARNAME, DIR [, DESCRIPTION])
dnl
dnl This macro _AC_DEFINEs VARNAME to the expansion of the DIR
dnl variable, taking care of fixing up ${prefix} and such.
dnl
dnl Note that the 3 argument form is only supported with autoconf 2.13
dnl and later (i.e. only where _AC_DEFINE supports 3 arguments).
dnl
dnl Examples:
dnl
dnl    AC_DEFINE_DIR(DATADIR, datadir)
dnl    AC_DEFINE_DIR(PROG_PATH, bindir, [Location of installed binaries])
dnl
dnl @version $Id: acinclude.m4,v 1.2 2002/01/25 18:46:42 cljanss Exp $
dnl @author Guido Draheim <guidod@gmx.de>, original by Alexandre Oliva
AC_DEFUN([AC_DEFINE_DIR], [
	test "x$prefix" = xNONE && prefix="$ac_default_prefix"
	test "x$exec_prefix" = xNONE && exec_prefix='${prefix}'
	ac_define_dir=`eval echo [$]$2`
	ac_define_dir=`eval echo [$]ac_define_dir`
	ifelse($3, ,
		AC_DEFINE_UNQUOTED($1, "$ac_define_dir"),
		AC_DEFINE_UNQUOTED($1, "$ac_define_dir", $3))
])

dnl Determine whether the compiler can produce Win32 executables
CheckWIN32()
{
    AC_MSG_CHECKING(Win32 compiler)
    have_win32_gcc=no
    AC_TRY_COMPILE([
     #include <windows.h>
    ],[
    ],[
    have_win32_gcc=yes
    ])
    AC_MSG_RESULT($have_win32_gcc)
    if test x$have_win32_gcc != xyes; then
       AC_MSG_ERROR([
*** Your compiler ($CC) does not produce Win32 executables!
       ])
    fi
}


dnl-------------------------------------------------------
dnl Detect target platform and build style
dnl-------------------------------------------------------
AC_MSG_CHECKING(target platform)
MATHLIB="-lm"
EEL_MODULE_DIR="$libdir/EEL"
EEL_SOEXT=".so"
EEL_DIRSEP=/
case "$target_os" in
	linux*)
		ARCH=linux
		AC_MSG_RESULT(GNU/Linux)
		MATHLIB="-lm"
		;;
	beos)
		ARCH=beos
		AC_MSG_RESULT(BeOS (UNTESTED!))
		MATHLIB=""
		;;
	mingw32*)
		ARCH=win32
#		EEL_DIRSEP=\\
		EEL_SOEXT=".dll"
		AC_MSG_RESULT(Win32 (mingw32))
		CheckWIN32
		SYSTEM_LIBS="$SYSTEM_LIBS -lwinmm -lole32"
		EEL_LIBS="-lmingw32 $EEL_LIBS"
		MATHLIB=""
		;;
	cygwin*)
		ARCH=win32
#		EEL_DIRSEP=\\
		EEL_SOEXT=".dll"
		AC_MSG_RESULT(Win32 (cygwin) (UNTESTED!))
		CheckWIN32
		SYSTEM_LIBS="$SYSTEM_LIBS -lwinmm -lole32"
		MATHLIB=""
		CFLAGS="$CFLAGS -I/usr/include/mingw -DWIN32 -Uunix -mno-cygwin"
		CFLAGS="$CFLAGS -DBROKEN__LONGJMP"
		EEL_CFLAGS="$EEL_CFLAGS -I/usr/include/mingw -DWIN32 -Uunix -mno-cygwin"
		LIBS="$LIBS -mno-cygwin"
		EEL_LIBS="-lmingw32 $EEL_LIBS -mno-cygwin"
		;;
	darwin*)
		ARCH=macosx
		EEL_SOEXT=".dylib"
		# Well, this doesn't *have* to be Mac OS X,
		# but we'd have to look elsewhere to find out.
		AC_MSG_RESULT(Mac OS X/Darwin (UNTESTED!))
		MATHLIB=""
		EEL_CFLAGS="$EEL_CFLAGS -F/System/Library/Frameworks/Carbon.framework"
		EEL_LIBS="$EEL_LIBS -framework Carbon"
		;;
	aix*)
		ARCH=aix
		AC_MSG_RESULT(AIX (UNTESTED!))
		if test x$ac_cv_c_compiler_gnu = xyes; then
			CFLAGS="-mthreads"
		fi
		;;
	solaris*)
		AC_MSG_RESULT(Solaris SPARC (UNTESTED!))
		MATHLIB="-lm"
		;;
	*)
		AC_MSG_RESULT(Unknown (assuming Un*x-like))
	        MATHLIB="-lm"
		;;
esac
SYSTEM_LIBS="$SYSTEM_LIBS $MATHLIB"
AC_SUBST(ARCH)
AC_SUBST(EEL_SOEXT)
AC_SUBST(EEL_DIRSEP)
AC_SUBST(EEL_MODULE_DIR)
AC_DEFINE_DIR(EEL_MODULE_DIR, EEL_MODULE_DIR, [EEL binary module path])


dnl-------------------------------------------------------
dnl Checks for debug mode
dnl-------------------------------------------------------
AC_ARG_ENABLE(debug,
[  --enable-debug          Build with debug switches and defines @<:@default=no@:>@],
                  , enable_debug=no)
AC_MSG_CHECKING(for debug build)
if test x$enable_debug = xyes; then
	CFLAGS="$CFLAGS -g -DDEBUG"
fi
AC_MSG_RESULT($enable_debug)


dnl-------------------------------------------------------
dnl Checks for Extreme Pickyness Mode
dnl	We have to put this here, as throwing -Werror
dnl	into CFLAGS will cause lots of autoconf
dnl	tests to fail on some systems.
dnl-------------------------------------------------------
LOCALCFLAGS=""
AC_ARG_ENABLE(epm,
[  --enable-epm            Compile with extremely picky settings @<:@default=no@:>@],
                  , enable_epm=no)
AC_MSG_CHECKING(for Extreme Pickyness Mode)
if test x$enable_epm = xyes; then
	LOCALCFLAGS="$LOCALCFLAGS -Wall -Werror -Wcast-align -Wbad-function-cast"
	LOCALCFLAGS="$LOCALCFLAGS -Waggregate-return -Wstrict-prototypes -fno-builtin"
	LOCALCFLAGS="$LOCALCFLAGS -Wdeclaration-after-statement -Wmissing-prototypes"
	LOCALCFLAGS="$LOCALCFLAGS -Wmissing-declarations -Wdisabled-optimization"
	LOCALCFLAGS="$LOCALCFLAGS -Wshadow"
fi
AC_MSG_RESULT($enable_epm)
AC_SUBST(LOCALCFLAGS)


dnl-------------------------------------------------------
dnl Check whether we should link with Electric Fence
dnl-------------------------------------------------------
AC_ARG_ENABLE(efence,
[  --enable-efence         Link with the Electric Fence malloc debugger @<:@default=no@:>@],
                  , enable_efence=no)
AC_MSG_CHECKING(for Electric Fence)
if test x$enable_efence = xyes; then
	SYSTEM_LIBS="$SYSTEM_LIBS -lefence"
fi
AC_MSG_RESULT($enable_efence)


dnl-------------------------------------------------------
dnl Set conditional variables for eel-config
dnl-------------------------------------------------------
AM_CONDITIONAL([ENABLE_SHARED], [test "$enable_shared" = yes])
AM_CONDITIONAL([ENABLE_STATIC], [test "$enable_static" = yes])


dnl-------------------------------------------------------
dnl Set runtime shared library paths as needed (from SDL)
dnl-------------------------------------------------------
if test $ARCH = linux -o $ARCH = freebsd -o $ARCH = bsdi; then
	EEL_RLD_FLAGS="-Wl,-rpath,\${exec_prefix}/lib"
fi
if test $ARCH = solaris; then
	EEL_RLD_FLAGS="-R\${exec_prefix}/lib"
fi
if test $ARCH = openbsd -o $ARCH = bsdi; then
	SHARED_SYSTEM_LIBS="$SYSTEM_LIBS"
else
	SHARED_SYSTEM_LIBS=""
fi
STATIC_SYSTEM_LIBS="$SYSTEM_LIBS"
AC_SUBST(EEL_RLD_FLAGS)


dnl-----------------------------------------------------------
dnl Expand the cflags and libraries needed by apps using EEL
dnl-----------------------------------------------------------
AC_SUBST(EEL_CFLAGS)
AC_SUBST(EEL_LDFLAGS)
AC_SUBST(EEL_LIBS)
AC_SUBST(EEL_RLD_FLAGS)


dnl-----------------------------------------------------------
dnl Expand the libraries needed for static and dynamic linking
dnl-----------------------------------------------------------
AC_SUBST(STATIC_SYSTEM_LIBS)
AC_SUBST(SHARED_SYSTEM_LIBS)
AC_SUBST(SYSTEM_LIBS)


dnl-----------------------------------------------------------
dnl Allow the pkg-config directory to be set
dnl-----------------------------------------------------------
AC_ARG_WITH(pkgconfigdir,
	AC_HELP_STRING([--with-pkgconfigdir],
	[Use the specified pkgconfig dir (default is libdir/pkgconfig)]),
	[pkgconfigdir=${withval}],
	[pkgconfigdir='${libdir}/pkgconfig'])
AC_SUBST([pkgconfigdir])
AC_MSG_NOTICE([pkgconfig directory is ${pkgconfigdir}])


dnl-------------------------------------------------------
dnl Generate output files
dnl-------------------------------------------------------
AC_OUTPUT([
Makefile
include/Makefile
src/Makefile
src/eelc/Makefile
src/io/Makefile
src/dir/Makefile
src/math/Makefile
src/dsp/Makefile
src/system/Makefile
docs/Makefile
tools/Makefile
eel-config
eel.pc
include/EEL_version.h
include/EEL_platform.h
], [chmod +x eel-config])

dnl-------------------------------------------------------
dnl Nice configuration report for the user
dnl-------------------------------------------------------

echo ""
echo ".--- EEL Configuration --------------------------------"
echo "|"
echo "|  * EEL version:                 $EEL_VERSION"
echo "|  * Architecture:                $ARCH"
echo "|"
echo "|  * Build static library:        $enable_static"
echo "|  * Build shared library:        $enable_shared"
echo "|"
echo "|  * Support EEL binary modules:  $enable_modules"
echo "|"
echo "'------------------------------------------------------"
echo ""
