/////////////////////////////////////////////
// pen.eel - Simple pen class for drawing
// Copyright (C) 2005 David Olofson
/////////////////////////////////////////////

import "SDL", "math", "line";

export function create(screen)[buffer]
{
	local pen = table [
		// Private stuff
		.lastx		0,
		.lasty		0,
		.drawing	false,
		.screen		screen,		// Screen surface

		// Interface
		.color		0,		// Pen color

		// Pen down
		procedure Down(self)
		{
			self.drawing = true;
		}

		// Move or draw
		procedure To(self, x, y)
		{
			if not self.drawing
			{
				self.(lastx, lasty) = x, y;
				return;
			}
			line(self.(screen, color, lastx, lasty), x, y);
			local ux, local uy = (x, y) |< self.(lastx, lasty);
			local uw = abs(x - self.lastx);
			local uh = abs(y - self.lasty);
			Update(ux, uy, (uw, uh) + 1);
			self.(lastx, lasty) = x, y;
		}

		// Pen up
		procedure Up(self)
		{
			self.drawing = false;
		}
	];

	// Alternate move or draw for back buffer
	procedure To_back(self, x, y)
	{
		local dirty = [];

		// Remove cursor
		local r = Rect [self.(lastx, lasty) - 2, 8, 8];
		BlitSurface(self.back, r, self.screen, r);
		dirty.+ r;

		// Draw some
		if self.drawing
		{
			line(self.(back, color, lastx, lasty), x, y);
			local ux, local uy = (x, y) |< self.(lastx, lasty);
			local uw = abs(x - self.lastx);
			local uh = abs(y - self.lasty);
			r = Rect [ux, uy, (uw, uh) + 1];
			BlitSurface(self.back, r, self.screen, r);
			dirty.+ r;
		}

		self.(lastx, lasty) = x, y;

		// Plot cursor
		Plot(self.screen, MapColor(self.screen, 255, 255, 255),
				(x - 2, y), (x - 1, y),
				(x, y - 2), (x, y - 1),
				(x + 1, y), (x + 2, y),
				(x, y + 1), (x, y + 2));
		FillRect(self.screen, Rect[(x, y) + 2, 4, 4], self.color);
		dirty.+ Rect [(x, y) - 2, 8, 8];

		Update(dirty);
	}

	if specified buffer
	{
		pen.back = buffer;
		pen.To = To_back;
	}
	return pen;
}
