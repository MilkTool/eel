/////////////////////////////////////////////
// balls.eel - EELBox Balls
// Copyright (C) 2005, 2010 David Olofson
/////////////////////////////////////////////

import "SDL", "math", "ball" as ball;

export function main<args>
{
	local nballs = 200;
	local screen = SetVideoMode(640, 480, 0, SWSURFACE);
	SetCaption("EELBox Balls", args[0]);
	ShowCursor(0);

	// Generate sprite graphics
	local sprites = [];
	for local z = 0, 32, 2
	{
		local s = ball.render(8 + z);
		SetAlpha(s, SRCALPHA | RLEACCEL);
		sprites.+ DisplayFormatAlpha(s);
	}

	// Main loop
	local start = GetTicks();
	local maxsize = sprites[sizeof sprites - 1].w;
	local xc, local yc = screen.(w, h) / 2;
	local xa, local ya = (xc, yc) - maxsize / 2;
	local dr = Rect[];
	while true
	mainloop:
	{
		local t = GetTicks() - start;

		// Handle events
		while true
		{
			local ev = PollEvent();
			if not ev
				break;
			switch ev.type
			  case KEYUP
				if ev.sym == KESCAPE
					break mainloop;
			  case MOUSEBUTTONUP, QUIT
				break mainloop;
		}

		// Clear screen
		FillRect(nil, nil, MapColor(screen, 0, 0, 0));

		// Render sprites
		local stx, local sty, local stz = t / (1000, 1400, 400);
		local za = sizeof sprites / 2;
		for local i = 0, nballs - 1
		{
			stx, sty, stz += .07, .09, .15;
			local s = sprites[za + sin(stz) * za];
			dr.x = xc + cos(stx) * xa - s.w / 2;
			dr.y = yc + sin(sty) * ya - s.h / 2;
			BlitSurface(s, nil, nil, dr);
		}

		// Make changes visible
		Flip();

		// ...in case we don't have retrace sync
		Delay(0);
	}
	return 0;
}
