dnl Process this file with autoconf to produce a configure script.
AC_INIT(COPYING)

REQUIRED_EEL_VERSION=0.3.6
REQUIRED_SDL_VERSION=1.2.10
REQUIRED_LIBPNG_VERSION=1.2.0
REQUIRED_SDLIMAGE_VERSION=1.2.10
REQUIRED_SDLNET_VERSION=1.2.7

dnl----------------------------------------------------------
dnl Note that eb_version.h is generated automatically, with
dnl the right version number! Just edit here and rebuild.
dnl----------------------------------------------------------
EELBOX_MAJOR_VERSION=0
EELBOX_MINOR_VERSION=1
EELBOX_MICRO_VERSION=21
EELBOX_VERSION=$EELBOX_MAJOR_VERSION.$EELBOX_MINOR_VERSION.$EELBOX_MICRO_VERSION
AC_SUBST(EELBOX_MAJOR_VERSION)
AC_SUBST(EELBOX_MINOR_VERSION)
AC_SUBST(EELBOX_MICRO_VERSION)
AC_SUBST(EELBOX_VERSION)

dnl Just in case someone looks in the wrong place.
AUTO_MESSAGE="    ==> DO NOT EDIT! Automatically generated by configure.in."
AC_SUBST(AUTO_MESSAGE)

AC_CANONICAL_HOST
AC_CANONICAL_TARGET

AM_INIT_AUTOMAKE(eelbox, $EELBOX_VERSION)

AC_CONFIG_MACRO_DIR([m4])
AC_PROG_CC
AC_C_CONST
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_RANLIB


dnl-------------------------------------------------------
dnl Checks for some C stuff.
dnl-------------------------------------------------------
AC_C_INLINE
AC_C_CONST


dnl-------------------------------------------------------
dnl Checks for header files.
dnl-------------------------------------------------------
AC_HEADER_STDC
AC_CHECK_HEADERS(string.h)


dnl-------------------------------------------------------
dnl Detect target platform and build style
dnl-------------------------------------------------------
EELBOX_LDADD=""
case "$target" in
    alpha*-*-linux*)
	CFLAGS="$CFLAGS -mcpu=ev4 -Wa,-mall"
        MATHLIB="-lm"
        ;;
    *-*-cygwin* | *-*-mingw32*)
	LDFLAGS="$LDFLAGS -export-dynamic -mwindows"
        MATHLIB=""
        EELBOX_LDADD="kobo2.res"
        ;;
    *-*-beos*)
	ac_default_prefix=/boot/develop/tools/gnupro
        MATHLIB=""
        ;;
    *-*-darwin*)
	CFLAGS="$CFLAGS -DMACOSX"
        MATHLIB=""
        ;;
    *-*-aix*)
        if test x$ac_cv_prog_gcc = xyes; then
            CFLAGS="-mthreads"
	fi
        ;;
    *)
        MATHLIB="-lm"
        ;;
esac
AC_SUBST(MATHLIB)
AC_SUBST(EELBOX_LDADD)

dnl---------------------------------------------------------
dnl Check for EEL
dnl---------------------------------------------------------
PKG_CHECK_MODULES([EEL], [eel >= $REQUIRED_EEL_VERSION])
CFLAGS="$CFLAGS $EEL_CFLAGS"
LIBS="$LIBS $EEL_LIBS"


dnl-------------------------------------------------------
dnl Check for SDL
dnl-------------------------------------------------------
PKG_CHECK_MODULES([SDL], [sdl >= $REQUIRED_SDL_VERSION])
CFLAGS="$CFLAGS $SDL_CFLAGS"
LIBS="$LIBS $SDL_LIBS"


dnl-------------------------------------------------------
dnl Check for SDL_image
dnl-------------------------------------------------------
PKG_CHECK_MODULES([SDL_image], [SDL_image >= $REQUIRED_SDLIMAGE_VERSION])
CFLAGS="$CFLAGS $SDL_image_CFLAGS"
LIBS="$LIBS $SDL_image_LIBS"


dnl-------------------------------------------------------
dnl Checks for OpenGL
dnl-------------------------------------------------------
AC_MSG_CHECKING(for OpenGL support)
have_opengl=no
AC_TRY_COMPILE([
	#if defined(__APPLE__) && defined(__MACH__)
	#include <OpenGL/gl.h>
	#else
	#include <GL/gl.h>
	#endif
],[
],[
have_opengl=yes
])
AC_ARG_ENABLE(opengl,
[  --enable-opengl          use OpenGL rendering layer [default=yes]],
                  , enable_opengl=yes)
if test x$enable_opengl = xyes; then
	AC_MSG_RESULT($have_opengl)
else
	have_opengl=no
	AC_MSG_RESULT(Disabled)
fi
if test x$have_opengl = xyes; then
	CFLAGS="$CFLAGS -DHAVE_OPENGL"
fi
AC_CHECK_HEADERS(SDL/SDL_opengl.h)


dnl-------------------------------------------------------
dnl Check for SDL_net
dnl-------------------------------------------------------
PKG_CHECK_MODULES([SDL_net], [SDL_net >= $REQUIRED_SDLNET_VERSION],
	[
		CFLAGS="$CFLAGS $SDL_net_CFLAGS"
		LIBS="$LIBS $SDL_net_LIBS"
	],[
		AC_CHECK_LIB(SDL_net, SDLNet_TCP_Send,,
        		AC_MSG_ERROR([*** SDL_net not found!]),
			-lSDL_net)
		LIBS="$LIBS -lSDL_net"
	])


dnl-------------------------------------------------------
dnl Check for ChipSound
dnl-------------------------------------------------------
PKG_CHECK_MODULES([ChipSound], [chipsound])
CFLAGS="$CFLAGS $ChipSound_CFLAGS"
LIBS="$LIBS $ChipSound_LIBS"


dnl-------------------------------------------------------
dnl See if the ALSA audio interface is supported (from SDL)
dnl-------------------------------------------------------
AC_CHECK_HEADER(sys/asoundlib.h, have_alsa_hdr=yes)
AC_CHECK_LIB(asound, snd_pcm_open, have_alsa_lib=yes)
AC_MSG_CHECKING(for ALSA audio support)
have_alsa=no
if test x$have_alsa_hdr = xyes -a x$have_alsa_lib = xyes; then
	have_alsa=yes
fi

AC_ARG_ENABLE(alsa,
[  --enable-alsa           support the ALSA audio API @<:@default=yes@:>@],
                  , enable_alsa=yes)
if test x$enable_alsa = xyes; then
	AC_MSG_RESULT($have_alsa)
else
	have_alsa=no
	AC_MSG_RESULT(Disabled)
fi

if test x$have_alsa = xyes; then
	CFLAGS="$CFLAGS -DHAVE_ALSA"
	LIBS="$LIBS -lasound"
fi


dnl-------------------------------------------------------
dnl Check for libpng
dnl-------------------------------------------------------
PKG_CHECK_MODULES([libPNG], [libpng >= $REQUIRED_LIBPNG_VERSION])
CFLAGS="$CFLAGS $LIBPNG_CFLAGS"
LIBS="$LIBS $LIBPNG_LIBS"


dnl-------------------------------------------------------
dnl Check for debug mode
dnl-------------------------------------------------------
AC_ARG_ENABLE(debug,
[  --enable-debug          Build with debug switches and defines @<:@default=no@:>@],
                  , enable_debug=no)
AC_MSG_CHECKING(for debug build)
if test x$enable_debug = xyes; then
	CFLAGS="$CFLAGS -g -DDEBUG"
fi
AC_MSG_RESULT($enable_debug)


dnl-------------------------------------------------------
dnl Check for Extreme Pickyness Mode
dnl	We have to put this here, as throwing -Werror
dnl	into CFLAGS will cause lots of autoconf
dnl	tests to fail on some systems.
dnl-------------------------------------------------------
LOCALCFLAGS=""
AC_ARG_ENABLE(epm,
[  --enable-epm            Compile with extremely picky settings @<:@default=no@:>@],
                  , enable_epm=no)
AC_MSG_CHECKING(for Extreme Pickyness Mode)
if test x$enable_epm = xyes; then
	LOCALCFLAGS="$LOCALCFLAGS -Wall -Wwrite-strings -Wcast-align -Wbad-function-cast"
	LOCALCFLAGS="$LOCALCFLAGS -Waggregate-return -Wstrict-prototypes -fno-builtin"
	LOCALCFLAGS="$LOCALCFLAGS -Wdeclaration-after-statement -Wmissing-prototypes"
	LOCALCFLAGS="$LOCALCFLAGS -Wmissing-declarations -Wdisabled-optimization"
	LOCALCFLAGS="$LOCALCFLAGS -Wshadow"
fi
AC_MSG_RESULT($enable_epm)
AC_SUBST(LOCALCFLAGS)


#AC_MSG_NOTICE("============================ Win32 console hack!!! ============================")
#CFLAGS="-O3 -g -Wall -I/opt/mingw/usr/i686-pc-mingw32/include/EEL   -D_GNU_SOURCE=1 -Dmain=SDL_main -I/opt/mingw/usr/i686-pc-mingw32/include/SDL   -D_GNU_SOURCE=1 -Dmain=SDL_main -I/opt/mingw/usr/i686-pc-mingw32/include/SDL -I/opt/mingw/usr/i686-pc-mingw32/include/libpng15   -DHAVE_OPENGL -D_GNU_SOURCE=1 -Dmain=SDL_main -I/opt/mingw/usr/i686-pc-mingw32/include/SDL   -D_GNU_SOURCE=1 -Dmain=SDL_main -I/opt/mingw/usr/i686-pc-mingw32/include/ChipSound -I/opt/mingw/usr/i686-pc-mingw32/include/SDL"
#LIBS="-L/opt/mingw/usr/i686-pc-mingw32/lib -lmingw32 -lEEL  -L/opt/mingw/usr/i686-pc-mingw32/lib -lmingw32 -lSDLmain -lSDL -liconv -lm -luser32 -lgdi32 -lwinmm -ldxguid  -L/opt/mingw/usr/i686-pc-mingw32/lib -lSDL_image -ltiff -ljpeg -lmingw32 -lSDLmain -lSDL -liconv -lm -luser32 -lgdi32 -lwinmm -ldxguid -lpng15 -lz  -L/opt/mingw/usr/i686-pc-mingw32/lib -lSDL_net -lmingw32 -lSDLmain -lSDL -liconv -lm -luser32 -lgdi32 -lwinmm -ldxguid  -L/opt/mingw/usr/i686-pc-mingw32 -L/opt/mingw/usr/i686-pc-mingw32/lib -lchipsound -lmingw32 -lSDLmain -lSDL -liconv -lm -luser32 -lgdi32 -lwinmm -ldxguid"


dnl-------------------------------------------------------
dnl Generate output files
dnl-------------------------------------------------------
AC_OUTPUT([
Makefile
eb_version.h
net2/Makefile
midi/Makefile
zeespace/Makefile
zeedraw/Makefile
chipsound/Makefile
])
