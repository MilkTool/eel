   ////////////////////////////////////////////////////////////
  // strings.eel - String processing utilities
 // Copyright 2014 David Olofson
////////////////////////////////////////////////////////////
//
// NOTE: For performance reasons, these functions generally
//       return dstrings rather than (immutable) strings!
//
////////////////////////////////////////////////////////////

module strings;

import io;


  /////////////////////////
 // Flags for quote()
/////////////////////////

// Set to leave out the double quotes
export constant STRINGS_NOQUOTES =	0x00000001;

// Set to quote lines as actual lines. Each line will end with a \n escape and
// an actual newline character. Unless STRINGS_NOQUOTES is set, lines will be
// quoted separately, C/C++/EEL multiline quoted string literal style.
export constant STRINGS_MULTILINE =	0x00000002;

// Use valid JSON escapes only
export constant STRINGS_JSONESCAPES =	0x00000004;


constant hexfigures = "0123456789ABCDEF";

export function hexstr(val)[figures = 0]
{
	val = (integer)val;
	if figures
	{
		local buf = dstring [];
		for local i = figures - 1, 0, -1
			buf.+ hexfigures[(val >> (4 * i)) & 0xf];
		return buf;
	}
	else if val
	{
		local buf = dstring [];
		while val
		{
			insert(buf, 0, hexfigures[val & 0xf]);
			val >>= 4;
		}
		return buf;
	}
	return "0";
}


export function octstr(val)[figures = 0]
{
	val = (integer)val;
	if figures
	{
		local buf = dstring [];
		for local i = figures - 1, 0, -1
			buf.+ hexfigures[(val >> (8 * i)) & 0x7];
		return buf;
	}
	else if val
	{
		local buf = dstring [];
		while val
		{
			insert(buf, 0, hexfigures[val & 0x7]);
			val >>= 3;
		}
		return buf;
	}
	return "0";
}


export function quote(data)[flags = 0]
{
	local jsonesc = flags & STRINGS_JSONESCAPES;
	local c = nil;
	local buf = dstring [];
	if not (flags & STRINGS_NOQUOTES)
		buf.+ '"';
	for local i = 0, sizeof data - 1
	{
		c = data[i];
		switch(c)
		  case '\\'
			buf.+ "\\\\";
		  case '\a'
			if jsonesc
				buf.+ "\\u0007";
			else
				buf.+ "\\a";
		  case '\b'
			buf.+ "\\b";
		  case '\f'
			buf.+ "\\f";
		  case '\n'
			if flags & STRINGS_MULTILINE
			{
				if flags & STRINGS_NOQUOTES
					buf.+ "\\n\n";
				else if i == (sizeof data - 1)
					buf.+ "\\n";
				else
					buf.+ "\\n\"\n\"";
			}
			else
				buf.+ "\\n";
		  case '\r'
			buf.+ "\\r";
		  case '\t'
			buf.+ "\\t";
		  case '\v'
			if jsonesc
				buf.+ "\\u000B";
			else
				buf.+ "\\v";
		  case '"'
			buf.+ "\\\"";
		  case '\''
			if jsonesc
				buf.+ "'";
			else
			{
				// Support single-quoted literals as well!
				buf.+ "\\'";
			}
		  default
			// FIXME: This handles C0 and C1 controls only! (JSON)
			if (c < 32) or (c > 126)
			{
				if jsonesc
				{
					buf.+ "\\u";
					buf.+ hexstr(c, 4);
				}
				else
				{
					buf.+ "\\";
					buf.+ octstr(c, 3);
				}
			}
			else
				buf.+ c;
	}
	if not (flags & STRINGS_NOQUOTES)
		buf.+ '"';
	return buf;
}


export function replace(s, what, with)[flags = 0]
{
	switch typeof what
	  case integer
		{}
	  case string, dstring
		throw "String matching not yet implemented!";
	  default
		throw "Cannot match object of type " + (string)what + "!";

	switch typeof with
	  case integer
		with = string [with];
	  case string, dstring
		{}
	  default
		throw "Cannot replace with object of type " + (string)with +
				"!";

	local r = dstring [];
	for local i = 0, sizeof s - 1
		if s[i] == what
			r.+ with;
		else
			r[sizeof r] = s[i];

	return r;
}


export function uppercase(s)[flags = 0]
{
	// TODO: Locales and/or UNICODE?
	local r = dstring [];
	for local i = 0, sizeof s - 1
		if (s[i] >= 'a') and (s[i] <= 'z')
			r.+ s[i] - 'a' + 'A';
		else
			r.+ s[i];
	return r;
}


export function lowercase(s)[flags = 0]
{
	// TODO: Locales and/or UNICODE?
	local r = dstring [];
	for local i = 0, sizeof s - 1
		if (s[i] >= 'A') and (s[i] <= 'Z')
			r.+ s[i] - 'A' + 'a';
		else
			r.+ s[i];
	return r;
}
