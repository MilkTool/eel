///////////////////////////////////////////////////////////////////////////
// EEL Built-In Library v0.3.7
///////////////////////////////////////////////////////////////////////////
// Copyright 2005, 2009, 2011-2012, 2014 David Olofson
//
// NOTE:	This file is converted into C string format and
//		included by e_builtin.c. If changes are made to
//		this file, EEL must be rebuilt and reinstalled!
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the
// use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//    claim that you wrote the original software. If you use this software
//    in a product, an acknowledgment in the product documentation would be
//    appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//    misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
///////////////////////////////////////////////////////////////////////////

module	eelbil;
export import "eelbil_c";

//////////////////////////////////////////////////////////////////////////
// Static variables
//

// EEL Version
static _eel_version = [__version(0), __version(1), __version(2)];
if __version(3)
	_eel_version[3] = __version(3);

// EEL Built-In Library Version
//
// NOTE: Set this equal to the current EEL version after making changes!
//
static _lib_version = [0, 3, 7];


//////////////////////////////////////////////////////////////////////////
// These return arrays with thre or more elements;
//	[0]: major version (major changes)
//	[1]: minor version (additions only)
//	[2]: micro version (bug fixes only)
//
// Any elements beyond index 2 are for builds and releases only, and
// should normally not be considered when checking versions.
//
// NOTE: All bets are off for major == 0 (beta) and when minor is an odd
//       number (development branch). Expect even micro bumps to break
//       everything!
//
export function eel_version
{
	return _eel_version;
}

export function eelbil_version
{
	return _lib_version;
}

//////////////////////////////////////////////////////////////////////////
// Returns a table containing info about exception 'x';
//	code:		Integer exception code
//	name:		Exception name ("XSOMETHING")
//	description:	Human readable description
//
export function exception_info(x)
{
	local r = table [];
	r.code = x;
	try
		r.name = exception_name(x);
	except
		r.name = "";
//	try
//		r.description = __xdesc(x);
//	except
		r.description = "(No description available.)";
	return r;
}

try
	for local x = 0, 99999
		__exports()[exception_name((integer)x)] = (integer)x;


//////////////////////////////////////////////////////////////////////////
// Deep cloning tool
//
export function deepclone(src)[_level]
{
	if specified _level
		local level = _level + 1;
	else
		level = 0;
	if level > 1000
		throw "deepclone(): Infinite recursion aborted!";
	switch typeof src
	  case array
	  {
		local a = [];
		for local i = 0, sizeof src - 1
			a[i] = deepclone(src[i], level);
		return a;
	  }
	  case table
	  {
		local t = table [];
		for local i = 0, sizeof src - 1
			t[key(src, i)] = deepclone(index(src, i), level);
		return t;
	  }
	  default
		return clone src;
}


//////////////////////////////////////////////////////////////////////////
// Deep comparison tool
//
export function deepcompare(l, r)[_level]
{
	if specified _level
		local level = _level + 1;
	else
		level = 0;
	if level > 1000
		throw "deepcompare(): Infinite recursion aborted!";
	switch typeof l
	  case array
	  {
		if typeof r != array
			return false;
		if sizeof l != sizeof r
			return false;
		for local i = 0, sizeof l - 1
			if not deepcompare(l[i], r[i], level)
				return false;
		return true;
	  }
	  case table
	  {
		if typeof r != table
			return false;
		if sizeof l != sizeof r
			return false;
		for local i = 0, sizeof l - 1
		{
			local k = key(l, i);
			if not deepcompare(l[k], r[k], level)
				return false;
		}
		return true;
	  }
	  default
		return l == r;
}


//////////////////////////////////////////////////////////////////////////
// Cleanup logic for modules keeping/building internal state that may
// prevent them from unloading properly.
//
// NOTE:
//	__cleanup() erases the entire '$' environment! It is only intended
//	to be used internally by EEL.
//
$.cleanup = [];

export procedure __cleanup
{
	for local i = 0, sizeof $.cleanup - 1
		$.cleanup[i]();
	delete($);
}
