///////////////////////////////////////////////////////////////////////////
// EEL Built-In Library v0.3.7
///////////////////////////////////////////////////////////////////////////
// Copyright 2005, 2009, 2011-2012, 2014 David Olofson
//
// NOTE:	This file is converted into C string format and
//		included by e_builtin.c. If changes are made to
//		this file, EEL must be rebuilt and reinstalled!
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the
// use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//    claim that you wrote the original software. If you use this software
//    in a product, an acknowledgment in the product documentation would be
//    appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//    misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
///////////////////////////////////////////////////////////////////////////

module builtin;
export import "builtin_c";

// For __load_eel_module()
import "system";
import "io";


//////////////////////////////////////////////////////////////////////////
// Static variables
//

// EEL Version
static _eel_version = [__version(0), __version(1), __version(2)];
if __version(3)
	_eel_version[3] = __version(3);

// EEL Built-In Library Version
//
// NOTE: Set this equal to the current EEL version after making changes!
//
static _lib_version = [0, 3, 7];


//////////////////////////////////////////////////////////////////////////
// These return arrays with thre or more elements;
//	[0]: major version (major changes)
//	[1]: minor version (additions only)
//	[2]: micro version (bug fixes only)
//
// Any elements beyond index 2 are for builds and releases only, and
// should normally not be considered when checking versions.
//
// NOTE: All bets are off for major == 0 (beta) and when minor is an odd
//       number (development branch). Expect even micro bumps to break
//       everything!
//
export function eel_version
{
	return _eel_version;
}

export function builtin_version
{
	return _lib_version;
}


//////////////////////////////////////////////////////////////////////////
// Module loading and compiling
//

// Compile a string of EEL source code into a module
export function compile(s)[flags, filename, modname]
{
print("--- compile 1\n");
	local m = module [];
print("--- compile 1.1\n");
	if specified flags
		local f = flags;
	else
		f = 0;
	m.__source = s;
print("--- compile 1.2\n");
	if specified filename
		local fn = filename;
	else
		fn = nil;
	if specified modname
		local mn = modname;
	else
		mn = nil;
print("--- compile 2 ", fn, "/", mn, "\n");
	if fn
		m.__filename = fn;
	else
		m.__filename = "script from " + ((string)typeof s) + ", " +
				(string)sizeof s + " bytes";
	if mn
		m.__modname = mn;
	else
		m.__modname = m.__filename;
print("--- compile 3\n");
	if not (f & SF_NOCOMPILE)
	{
		__compile(m, f);
print("--- compile 4\n");
		if not (f & SF_NOINIT)
			m.__init_module();
print("--- compile 5\n");
	}
	return m;
}


// Default EEL script module loader
export function __load_eel_module(fullpath, flags)
{
	local f = file [fullpath, "rb"];
	local buf = read(f, sizeof f);
	return compile(buf, flags, fullpath);
}

$.__load_eel_module = __load_eel_module;


// Default module loader; try paths, extensions etc...
export function __load_via_path_modules(modname, flags)
{
// TODO: There are a bunch of combinations that can be ruled out
// TODO: right away by looking at the format of 'modname'...
	function try_load(p, f)
	{
		local ldeel = $.__load_eel_module;
		try
			if copy(p, sizeof p - 4) != ".eel"
				return ldeel(p + ".eel", f);
		try
			if copy(p, sizeof p - 4) != ".ess"
				return ldeel(p + ".ess", f);
		try
			return ldeel(p, f);
		try
			if copy(p, sizeof p - sizeof SOEXT) != SOEXT
				return __load_binary(p + SOEXT, f);
		try
			return __load_binary(p, f);
		return nil;
	}
	local modpaths = $.path_modules;
	for local i = 0, sizeof modpaths - 1
	{
		if sizeof modpaths[i]
			local m = try_load(modpaths[i] + DIRSEP + modname, flags);
		else
			m = try_load(modname, flags);
		if m
			return m;
	}
	throw __exports().XMODULELOAD;
}


export function __load_injected_module(modname, flags)
{
	return $.injected_modules[modname](flags);
}


// Default module loaders
$.module_loaders = [
	__get_loaded_module,	// Try to grab a loaded shared module
	__load_injected_module,	// See if it's an injected module
	__load_via_path_modules	// Try to load from disk
];


// Try to load a module, using the installed module loaders
//export function load(modname)[flags]
function _load(modname)[flags]
{
	local x = $.module_loaders;
	if specified flags
		local f = flags;
	else
		f = 0;
	for local i = 0, sizeof x - 1
	{
		local load_error = nil;
		try
		{
			local m = x[i](modname, f);
			if typeof m == module
				return m;
			load_error = "load(): " + x[i].name + "(\"" +
					(string)modname + "\"" + ", " +
					(string)f + ") returned " + (string)m +
					" instead of a module";
		}
		if load_error
			throw load_error;
	}
	throw "load(): Module \"" + (string)modname + "\" not found";
}

export function load(modname)[flags]
{
	if specified flags
		return _load(modname, flags);
	else
		return _load(modname);
}


//////////////////////////////////////////////////////////////////////////
// Returns a table containing info about exception 'x';
//	code:		Integer exception code
//	name:		Exception name ("XSOMETHING")
//	description:	Human readable description
//
export function exception_info(x)
{
	local r = table [];
	r.code = x;
	try
		r.name = exception_name(x);
	except
		r.name = "";
	try
		r.description = exception_description(x);
	except
		r.description = "(No description available.)";
	return r;
}

try
	for local x = 0, 99999
		__exports()[exception_name((integer)x)] = (integer)x;


//////////////////////////////////////////////////////////////////////////
// Deep cloning tool
//
export function deepclone(src)[_level]
{
	if specified _level
		local level = _level + 1;
	else
		level = 0;
	if level > 1000
		throw "deepclone(): Infinite recursion aborted!";
	switch typeof src
	  case array
	  {
		local a = [];
		for local i = 0, sizeof src - 1
			a[i] = deepclone(src[i], level);
		return a;
	  }
	  case table
	  {
		local t = table [];
		for local i = 0, sizeof src - 1
			t[key(src, i)] = deepclone(index(src, i), level);
		return t;
	  }
	  default
		return clone src;
}


//////////////////////////////////////////////////////////////////////////
// Deep comparison tool
//
export function deepcompare(l, r)[_level]
{
	if specified _level
		local level = _level + 1;
	else
		level = 0;
	if level > 1000
		throw "deepcompare(): Infinite recursion aborted!";
	switch typeof l
	  case array
	  {
		if typeof r != array
			return false;
		if sizeof l != sizeof r
			return false;
		for local i = 0, sizeof l - 1
			if not deepcompare(l[i], r[i], level)
				return false;
		return true;
	  }
	  case table
	  {
		if typeof r != table
			return false;
		if sizeof l != sizeof r
			return false;
		for local i = 0, sizeof l - 1
		{
			local k = key(l, i);
			if not deepcompare(l[k], r[k], level)
				return false;
		}
		return true;
	  }
	  default
		return l == r;
}


//////////////////////////////////////////////////////////////////////////
// Cleanup logic for modules keeping/building internal state that may
// prevent them from unloading properly.
//
// NOTE:
//	__cleanup() erases the entire '$' environment! It is only intended
//	to be used internally by EEL.
//
$.cleanup = [];

export procedure __cleanup
{
	for local i = 0, sizeof $.cleanup - 1
		$.cleanup[i]();
	delete($);
}
