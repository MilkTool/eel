/////////////////////////////////////////////
// Temporary EEL Test Suite
// Copyright 2014 David Olofson
/////////////////////////////////////////////

procedure verify(f, result, correct)
{
	print("  ", f.name, " returned \"", result,"\" ; should be \"", correct);
	if result == correct
		print("\" PASS\n");
	else
	{
		print("\" FAIL\n");
		throw "Incorrect result!";
	}
}

function opt[a = "A", b = "B", c = "C"]
{
	return a + b + c;
}

function tup<a = "A", b = "B", c = "C">
{
	return a[0] + b[0] + c[0] + a[1] + b[1] + c[1];
}

function req_opt(req)[a = "A", b = "B", c = "C"]
{
	return req + a + b + c;
}

function req_tup(req)<a = "A", b = "B", c = "C">
{
	return req + a[0] + b[0] + c[0] + a[1] + b[1] + c[1];
}

function opt_tup[a = "A", b = "B"]<c = "C", d = "D">
{
	return a + b + c[0] + d[0] + c[1] + d[1];
}

function req_opt_tup(req)[a = "A", b = "B"]<c = "C", d = "D">
{
	return req + a + b + c[0] + d[0] + c[1] + d[1];
}

function opt_uv[a = "A", b = "B", c = "C"]
{
	function f()
	{
		return upvalue a + upvalue b + upvalue c;
	}
	return f();
}

function tup_uv<a = "A", b = "B", c = "C">
{
	function f()
	{
		upvalue a, upvalue b, upvalue c;
		return a[0] + b[0] + c[0] + a[1] + b[1] + c[1];
	}
	return f();
}

function req_opt_uv(req)[a = "A", b = "B", c = "C"]
{
	function f()
	{
		return upvalue req + upvalue a + upvalue b + upvalue c;
	}
	return f();
}

function req_tup_uv(req)<a = "A", b = "B", c = "C">
{
	function f()
	{
		upvalue req, upvalue a, upvalue b, upvalue c;
		return req + a[0] + b[0] + c[0] + a[1] + b[1] + c[1];
	}
	return f();
}

function opt_tup_uv[a = "A", b = "B"]<c = "C", d = "D">
{
	function f()
	{
		upvalue a, upvalue b, upvalue c, upvalue d;
		return a + b + c[0] + d[0] + c[1] + d[1];
	}
	return f();
}

function req_opt_tup_uv(req)[a = "A", b = "B"]<c = "C", d = "D">
{
	function f()
	{
		upvalue req, upvalue a, upvalue b, upvalue c, upvalue d;
		return req + a + b + c[0] + d[0] + c[1] + d[1];
	}
	return f();
}

export function main<args>
{
	print("Argument default value tests:\n");

	print("\nLocal arguments:\n");
	print("------------------------------------------\n");
	verify(opt, opt("a", "b", "c"), "abc");
	verify(opt, opt("a", "b"), "abC");
	verify(opt, opt("a"), "aBC");
	verify(opt, opt(), "ABC");
	print("------------------------------------------\n");
	verify(tup, tup("a", "b", "c", "x", "y", "z"), "abcxyz");
	verify(tup, tup("a", "b", "c"), "abcABC");
	verify(tup, tup(), "ABCABC");
	print("------------------------------------------\n");
	verify(req_opt, req_opt("R", "a", "b", "c"), "Rabc");
	verify(req_opt, req_opt("R", "a", "b"), "RabC");
	verify(req_opt, req_opt("R", "a"), "RaBC");
	verify(req_opt, req_opt("R"), "RABC");
	print("------------------------------------------\n");
	verify(req_tup, req_tup("R", "a", "b", "c", "x", "y", "z"),
			"Rabcxyz");
	verify(req_tup, req_tup("R", "a", "b", "c"), "RabcABC");
	verify(req_tup, req_tup("R"), "RABCABC");
	print("------------------------------------------\n");
	verify(opt_tup, opt_tup("a", "b", "c", "d", "e", "f"), "abcdef");
	verify(opt_tup, opt_tup("a", "b", "c", "d"), "abcdCD");
	verify(opt_tup, opt_tup("a", "b"), "abCDCD");
	verify(opt_tup, opt_tup("a"), "aBCDCD");
	verify(opt_tup, opt_tup(), "ABCDCD");
	print("------------------------------------------\n");
	verify(req_opt_tup, req_opt_tup("R", "a", "b", "c", "d", "e", "f"),
			"Rabcdef");
	verify(req_opt_tup, req_opt_tup("R", "a", "b", "c", "d"), "RabcdCD");
	verify(req_opt_tup, req_opt_tup("R", "a", "b"), "RabCDCD");
	verify(req_opt_tup, req_opt_tup("R", "a"), "RaBCDCD");
	verify(req_opt_tup, req_opt_tup("R"), "RABCDCD");

	print("\nUpvalue arguments:\n");
	print("------------------------------------------\n");
	verify(opt_uv, opt_uv("a", "b", "c"), "abc");
	verify(opt_uv, opt_uv("a", "b"), "abC");
	verify(opt_uv, opt_uv("a"), "aBC");
	verify(opt_uv, opt_uv(), "ABC");
	print("------------------------------------------\n");
	verify(tup_uv, tup_uv("a", "b", "c", "x", "y", "z"), "abcxyz");
	verify(tup_uv, tup_uv("a", "b", "c"), "abcABC");
	verify(tup_uv, tup_uv(), "ABCABC");
	print("------------------------------------------\n");
	verify(req_opt_uv, req_opt_uv("R", "a", "b", "c"), "Rabc");
	verify(req_opt_uv, req_opt_uv("R", "a", "b"), "RabC");
	verify(req_opt_uv, req_opt_uv("R", "a"), "RaBC");
	verify(req_opt_uv, req_opt_uv("R"), "RABC");
	print("------------------------------------------\n");
	verify(req_tup_uv, req_tup_uv("R", "a", "b", "c", "x", "y", "z"),
			"Rabcxyz");
	verify(req_tup_uv, req_tup_uv("R", "a", "b", "c"), "RabcABC");
	verify(req_tup_uv, req_tup_uv("R"), "RABCABC");
	print("------------------------------------------\n");

	print("Argument default value tests done.\n");
	return 0;
}
