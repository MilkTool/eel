/////////////////////////////////////////////////////////
// curvetool.eel - Simple graphing calculator
// Copyright 2006, 2014 David Olofson
/////////////////////////////////////////////////////////

module curvetool;

import math;
import io as io;
import SDL as SDL;
import eelium.gui as gui;
import deltawidgets as dw;

constant DRAW_LINES = false;

static bpp;
static flags;
static screen;
static running = true;
static unsaved = false;
static guiroot;
static graph;
static curvemenu;
static editpanel;
static curve = 5;
static xscale, static yscale;
static sel;
static curves = [];

static xmin = 0;
static xmax = 1;
static xstep = .01;

// Tool palette
static tool_curve = 0;

// Expression editor
static expedit = [];
static fsel = [];
static fcurve = [];


function CurveToggle(parent, crv)
{
	local c = curves[crv];
	local b = gui.Toggle(parent, c.name,
			procedure(self)
			{
				curves[self.curve].visible = self.pressed;
				graph:Invalidate();
			});
	b:ApplyTheme(c.theme);
	b.curve = crv;
	return b;
}


procedure add_curve(name, glyph, r, g, b)
{
	local c = graph:Curve(name, glyph, r, g, b, DRAW_LINES);
	c.theme = clone guiroot.theme;
	c.theme.colors = clone c.theme.colors;
	c.theme:SetActiveColors(r, g, b, 1.3);
	curves.+ c;
	CurveToggle(curvemenu, sizeof curves - 1);
}


function SelectButton(parent, onchange)
{
	local b = gui.Button(parent, "", procedure(self)
			{
				switch self.button
				  case SDL.BUTTON_LEFT, SDL.BUTTON_WHEELUP
					self.selected += 1;
				  case SDL.BUTTON_RIGHT, SDL.BUTTON_WHEELDOWN
					self.selected -= 1;
				if self.selected < 0
					self.selected = sizeof curves - 1;
				else if self.selected > (sizeof curves - 1)
					self.selected = 0;
				self:Select(self.selected);
			});
	b.OnChange = onchange;
	b.selected = 0;
	b.Select = procedure(self, crv)
	{
		self.selected = crv;
		self:OnChange();
		local c = curves[self.selected];
		self:SetCaption(c.name);
		self:ApplyTheme(c.theme);
	};
	return b;
}


function MultiSelectButton(parent, onchange)
{
	local b = gui.Button(parent, "", procedure(self)
			{
				switch self.button
				  case SDL.BUTTON_LEFT, SDL.BUTTON_WHEELUP
					self.selected += 1;
				  case SDL.BUTTON_RIGHT, SDL.BUTTON_WHEELDOWN
					self.selected -= 1;
				if self.selected < -1
					self.selected = sizeof curves - 1;
				else if self.selected > (sizeof curves - 1)
					self.selected = -1;
				self:Select(self.selected);
			});
	b.OnChange = onchange;
	b.selected = -1;
	b.Select = procedure(self, crv)
	{
		self.selected = crv;
		self:OnChange();
		if crv >= 0
		{
			local c = curves[self.selected];
			self:SetCaption(c.name);
			self:ApplyTheme(c.theme);
		}
		else
		{
			self:SetCaption("ALL");
			self:ApplyTheme(self.parent.theme);
		}
	};
	return b;
}


procedure ask_exit(parent)
{
	if gui.GetModal()
		return;
	local r = SDL.Rect [0, 0, 250, 150];
	r.(x, y) = (gui.GetTarget().(w, h) - r.(w,h)) / 2;
	local win = gui.Window(r);
	win:ApplyTheme(parent.theme);
	win:SetAlign("grid", 1, 2, nil, vector [3, 1]);
	if unsaved
		gui.Label(win, "Unsaved data! Really quit?");
	else
		gui.Label(win, "Really quit?");
	local p = gui.Panel(win, "none");
	p:SetAlign("grid", 2, 1);
	gui.Button(p, "Yes", procedure(self) { running = false; });
	local defbutton = gui.Button(p, "No", procedure(self)
			{
				self.win:Delete();
			});
	defbutton.win = win;
	gui.SetModal(win);
	gui.SetFocus(defbutton);
}


procedure scale_dialog(parent, crv)
{
	local c = curves[crv];
	local r = SDL.Rect [0, 0, 250, 150];
	r.(x, y) = (gui.GetTarget().(w, h) - r.(w,h)) / 2;
	local win = gui.Window(r);
	win:ApplyTheme(parent.theme);
	win:SetAlign("grid", 1, 3, nil, vector [2, 1, 1]);
	win.label = gui.Label(win, "");
	win.curve = c;
	win.scale = 1.;
	win.slider = gui.HSlider(win, procedure(self, v)
		{
			local w = self.parent;
			w.scale = v * 10.;
			w.label:SetCaption("Scale curve '" + w.curve.name +
					"' by " + (string)w.scale);
		});
	local p = gui.Panel(win, "none");
	p:SetAlign("grid", 2, 1);
	local defbutton = gui.Button(p, "Apply", procedure(self)
		{
			local w = self.parent.parent;
print("y: ", w.curve.y, "\tscale: ", w.scale, "\n");
			w.curve.y.#* w.scale;
			w:Delete();
		});
	gui.Button(p, "Cancel", procedure(self)
		{
			local w = self.parent.parent;
			w:Delete();
		});
	win.slider:MovePos(.1);
	gui.SetModal(win);
	gui.SetFocus(defbutton);
}


procedure messagebox(parent, msg)
{
	local r = SDL.Rect [0, 0, 250, 150];
	r.(x, y) = (gui.GetTarget().(w, h) - r.(w,h)) / 2;
	local win = gui.Window(r);
	win:ApplyTheme(parent.theme);
	win:SetAlign("grid", 1, 2, nil, vector [3, 1]);
	gui.Label(win, msg);
	local p = gui.Panel(win, "none");
	p:SetAlign("grid", 2, 1);
	gui.Panel(p, "none");
	local defbutton = gui.Button(p, "Ok", procedure(self)
			{
				self.win:Delete();
			});
	defbutton.win = win;
	gui.SetModal(win);
	gui.SetFocus(defbutton);
}


procedure evaluate_fx(c, code)
{
	local expr = nil;
	try
		expr = compile(	"import curvetool;\n"
				"import math;\n"
				"export function f(x)\n"
				"{\n"
				"  local y = 0;\n"
				"  " + code + ";\n"
				"  return y;\n"
				"}\n");
	except
	{
		messagebox(guiroot, "Expression parse error! (" +
				exception_name(exception) + ")");
		return;
	}
	for local i = xmin, xmax, xstep
		try
			c:Add(i, expr.f(i));
		except
		{
			messagebox(guiroot, "Expression evaluation "
					"failed at x = " +
					(string)i + " (" +
					exception_name(exception) +
					")");
			return;
		}
}


procedure handle_event(ev)
{
	switch ev.type
	  case SDL.QUIT
		ask_exit(guiroot);
	  case SDL.VIDEOEXPOSE
	  {
		SDL.FillRect(screen, nil, 0);
		guiroot.dirty = true;
	  }
	  case SDL.VIDEORESIZE
	  {
		screen = SDL.SetVideoMode(ev.w, ev.h, bpp, flags);
		guiroot:SetRect(SDL.Rect [0, 0, ev.(w, h)]);
		gui.Invalidate();
	  }
	  default
		gui.Dispatch(ev);
}


export function main<args>
{
	bpp = 0;
	flags = SDL.HWSURFACE | SDL.RESIZABLE;
	screen = SDL.SetVideoMode(1000, 740, bpp, flags);
	SDL.SetCaption("Visual Curve Playground", "curvetool");
	gui.Open(screen);

	guiroot = dw.Root();
	guiroot.colrowratio = 0;
	guiroot.rowratio = vector [1, 30, 3];

	// Control panel
	local cp = gui.Panel(guiroot, "none")
		:SetAlign("grid", 20, 1, vector [], vector [], true);
	  curvemenu = gui.Panel(cp, "none")
			:SetAlign("ratio", 1000);
	  curvemenu.logicrect.w = 19;
	  local xbutton = gui.Button(cp, "Quit",
			procedure(self) { ask_exit(self.gui); });
	  xbutton.gui = guiroot;

	// Graph panel
	local gp = gui.Panel(guiroot, "none")
		:SetAlign("grid", 3, 2);
	gp.colratio = vector [2, 30, 3];
	gp.rowratio = vector [30, 2];
	
	  yscale = gui.VScale(gp, procedure(self, sc, offset)
			{
				local firstc, local lastc = curve;
				if curve < 0
					firstc, lastc = 0, sizeof curves - 1;
				for local ci = firstc, lastc
				{
					local c = curves[ci];
					c.yscale = sc;
					c.yoffs = offset;
				}
				graph:Invalidate();
			});
	  graph = gui.Graph(gui.Panel(gp, "depression"));
	    add_curve("Curve0", "square", 255, 0, 0);
	    add_curve("Curve1", "box", 0, 64, 255);
	    add_curve("Curve2", "ring", 0, 255, 0);
	    add_curve("Curve3", "ring", 255, 255, 0);
	    add_curve("Curve4", "dot", 255, 128, 128);
	    add_curve("Curve5", "dot", 128, 255, 128);
	    add_curve("Curve6", "dot", 128, 128, 255);
	    add_curve("Curve7", "dot", 255, 128, 255);
	    gui.Panel(curvemenu, "flat");

	  // Tool palette
	  local p = gui.Panel(gp, "none")
		:SetAlign("grid", 1, 15);
	  p.logicrect.w = 8;
	    SelectButton(p, procedure(self) { tool_curve = self.selected; })
		:Select(tool_curve);
	    gui.Button(p, "Clear", procedure(self)
			{
				local c = curves[tool_curve];
				delete(c.x);
				delete(c.y);
				graph:Invalidate();
			});
	    gui.Button(p, "Sine", procedure(self)
			{
				local c = curves[tool_curve];
				for local i = 0, .99, .01
					c:Add(i, sin(i * 2 * PI) + 1);
				graph:Invalidate();
			});
	    gui.Button(p, "Sort X", procedure(self)
			{
				local c = curves[tool_curve];
				if not sizeof c.x
					return;
				local newx = vector [c.x[0]];
				local newy = vector [c.y[0]];
				for local i = 1, sizeof c.x - 1
				{
					if c.x[i] >= newx[sizeof newx - 1]
					{
						newx.+ c.x[i];
						newy.+ c.y[i];
						continue;
					}
					for local j = 0, sizeof newx - 1
					{
						if c.x[i] < newx[j]
						{
							insert(newx, j, c.x[i]);
							insert(newy, j, c.y[i]);
							break;
						}
					}
				}
				c.x = newx;
				c.y = newy;
				graph:Invalidate();
			});
	    gui.Button(p, "Remove DC", procedure(self)
			{
				local c = curves[tool_curve];
				local avg = 0;
				for local i = 0, sizeof c.y - 1
					avg += c.y[i];
				avg /= sizeof c.y;
				c.y #+= -avg;
				graph:Invalidate();
			});
	    gui.Button(p, "Scale", procedure(self)
			{
				scale_dialog(self.gui, tool_curve);
			}).gui = guiroot;
	    gui.Button(p, "Derivate", procedure(self)
			{
				local c = curves[tool_curve];
				if sizeof c.y < 2
					return;
				local last_x = c.x[sizeof c.y - 1] - 1.;
				local last_y = c.y[sizeof c.y - 1];
				local last_r = 0.;
				for local i = 0, sizeof c.y - 1
				{
					local x = c.x[i];
					local y = c.y[i];
					local dx = (x - last_x) * (2. * PI);
					local dy = y - last_y;
					if not dx
						local r = last_r;
					else
						r = dy / dx;
					c.y[i] = r;
					last_y = y;
					last_x = x;
					last_r = r;
				}
				graph:Invalidate();
			});
	    gui.Button(p, "Integrate", procedure(self)
			{
				local c = curves[tool_curve];
				if not sizeof c.y
					return;
				local r = 0.;
				for local i = 0, sizeof c.y - 1
				{
					r += c.y[i];
					c.y[i] = r;
				}
				graph:Invalidate();
			});
	    gui.Button(p, "Invert", procedure(self)
			{
				local c = curves[tool_curve];
				for local i = 0, sizeof c.y - 1
					c.y[i] = -c.y[i];
				graph:Invalidate();
			});
	    gui.Button(p, "SwapXY", procedure(self)
			{
				local c = curves[tool_curve];
				for local i = 0, sizeof c.y - 1
				{
					local sw = c.y[i];
					c.y[i] = c.x[i];
					c.x[i] = sw;
				}
				graph:Invalidate();
			});

	    gui.LineEditor(p, (string)xmin,
	    		procedure(self, text) { xmin = (real)text; });
	    gui.LineEditor(p, (string)xmax,
	    		procedure(self, text) { xmax = (real)text; });
	    gui.LineEditor(p, (string)xstep,
	    		procedure(self, text) { xstep = (real)text; });

	  local scp = gui.Panel(gp, "none")
		:SetAlign("grid", 1, 2);
	  sel = MultiSelectButton(scp, procedure(self)
			{
				curve = self.selected;
				if curve >= 0
				{
					local c = curves[curve];
					xscale:Set(c.xscale, c.xoffs);
					xscale:ApplyTheme(c.theme);
					yscale:Set(c.yscale, c.yoffs);
					yscale:ApplyTheme(c.theme);
				}
				else
				{
					local c = curves[0];
					xscale:Set(c.xscale, c.xoffs);
					xscale:ApplyTheme(self.parent.theme);
					yscale:Set(c.yscale, c.yoffs);
					yscale:ApplyTheme(self.parent.theme);
				}
			});

	  gui.Button(scp, "Auto", procedure(self)
			{
				if curve < 0
				{
					local c = curves[0];
					c:AutoScale(true, true);
					local shadow xmin, local shadow xmax =
							1e100, -1e100;
					local ymin, local ymax = 1e100, -1e100;
					local visible = false;
					for local ci = 0, sizeof curves - 1
					{
						c = curves[ci];
						if not c.visible
							continue;
						c:AutoScale(true, true);
						xmin, ymin |<= c.(xmin, ymin);
						xmax, ymax >|= c.(xmax, ymax);
						visible = true;
					}
					if not visible
						return;
					if xmax != xmin
						local xs = 1. / (xmax - xmin);
					else
						xs = curves[0].xscale;
					if ymax != ymin
						local ys = 1. / (ymax - ymin);
					else
						ys = curves[0].yscale;
					local xo = -xmin * xs;
					local yo = ymax * ys;
					for local ci = 0, sizeof curves - 1
					{
						c = curves[ci];
						c:Scale(xs, ys);
						c:Offset(xo, yo);
					}
					xscale:Set(xs, xo);
					yscale:Set(ys, yo);
				}
				else
				{
					local c = curves[curve];
					c:AutoScale(true, true);
					xscale:Set(c.xscale, c.xoffs);
					yscale:Set(c.yscale, c.yoffs);
				}
			});

	  xscale = gui.HScale(gp, procedure(self, sc, offset)
			{
				local firstc, local lastc = curve;
				if curve < 0
					firstc, lastc = 0, sizeof curves - 1;
				for local ci = firstc, lastc
				{
					local c = curves[ci];
					c.xscale = sc;
					c.xoffs = offset;
				}
				graph:Invalidate();
			});

	  sel:Select(0);

	// Editor panel
	local expressions = [];
	try
	{
		local f = file ["curvetool.cfg", "rb"];
		for local i = 0, 2
		{
			expressions[i] = (dstring)"";
			try while true
			{
				local c = io.read(f, 1);
				if(c == "\n")
					break;
				expressions[i].+ c;
			}
		}
	}
	except
	{
		expressions[0] = "y = sin(x * 2 * PI)";
		expressions[1] = "y = sin(x * 4 * PI)";
		expressions[2] = "y = sin(x * 8 * PI)";
	}
	editpanel = gui.Panel(guiroot, "none")
		:SetAlign("grid", 3, 3, vector [2, 32, 2]);
	  for local i = 0, 2
	  {
		fsel[i] = SelectButton(editpanel, procedure(self)
				{
					self.curve = self.selected;
				});
		fsel[i].curve = i;
		expedit[i], local le = gui.LineEditor(editpanel, expressions[i]);
		local b = gui.Button(editpanel, "Render", procedure(self)
				{
					evaluate_fx(curves[
							self.selector.curve],
							self.editor.text);
					graph:Invalidate();
				});
		b.editor = le;
		b.selector = fsel[i];
		fsel[i]:Select(fsel[i].curve);
	  }

	while running
	{
		handle_event(SDL.WaitEvent());
		while true
		{
			local ev = SDL.PollEvent();
			if not ev
				break;
			handle_event(ev);
		}
		local dr = array [];
		gui.Refresh(dr);
		if sizeof dr
			SDL.Update(dr);
	}

	local f = file ["curvetool.cfg", "wb"];
	for local i = 0, 2
		io.write(f, expedit[i].text, "\n");

	curves = nil;
	gui.Close();
	return 0;
}
