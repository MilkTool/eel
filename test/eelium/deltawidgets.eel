/////////////////////////////////////////////////////
// deltawidgets.eel - Some GUI widgets for Delta
// Copyright 2005, 2006, 2014, 2020 David Olofson
/////////////////////////////////////////////////////

module deltawidgets;

eelversion 0.3.7;

import math;
import eelium.text as text;
import SDL as SDL;
import eelium.gui as gui;

function round(v, m)
{
	return floor((v / m) + (m / 2)) * m;
}


// Plotter with on/off switch, offset, scale, fine scale, reset and autoscale
export function DPlotter(parent, min, max, caption)
{
	// Base panel
	local bp = gui.Panel(parent);
	bp.colrowratio = 0;
	bp.rowratio = vector [7, 1];
	bp.Recalc = procedure(self)
	{
		local pl = self.plotter;

		// Gather parameters
		pl.auto = self.autobutton.caption == "Auto";
		if pl.auto
		{
			self.fineoffsetslider:SilentMove(0);
			self.scaleslider.enabled = false;
			self.offsetslider.enabled = false;
			self.fineoffsetslider.enabled = false;
		}
		else
		{
			pl.scale = self.scaleslider.value;
			pl.offset = self.offsetslider.value;
			pl.fineoffset = self.fineoffsetslider.value;
			self.scaleslider.enabled = true;
			self.offsetslider.enabled = true;
			self.fineoffsetslider.enabled = true;
		}

		// Update the plotter
		local center = pl.range * (pl.offset + pl.fineoffset);
		center += (pl.defmin + pl.defmax) / 2;
		pl.min = round(center - (pl.range * pl.scale / 2), .01);
		pl.max = round(center + (pl.range * pl.scale / 2), .01);
		if pl.min == pl.max
		{
			pl.min -= .005;
			pl.max += .005;
		}
		self.dirty = true;
	};

	// Plotter
	local pl, bp.plotter = gui.Plotter(bp, min, max, caption);
	pl.base = bp;
	pl.defmin = min;
	pl.defmax = max;
	pl.range = max - min;
	pl.scale = .1;
	pl.offset = 0;
	pl.fineoffset = 0;
	pl.round = .01;
	pl.oldInput = pl.Input;
	pl.oldRedraw = pl.Redraw;
	pl.Redraw = procedure(self)
	{
		if self.auto and sizeof self.data
		{
			local minv, local maxv = self.data[0];
			for local i = 0, sizeof self.data - 1
			{
				local v = self.data[i];
				minv |<= v;
				maxv >|= v;
			}
			minv = floor(minv / self.round) * self.round;
			maxv = ceil(maxv / self.round) * self.round;
			if minv >= maxv
				self.(min, max) = (minv + maxv) / 2 + (.01, -.01);
			else
				self.(min, max) = minv, maxv;
			local center = (self.defmin + self.defmax) / 2;
			self.offset = ((self.max + self.min) / 2 - center) / self.range;
			self.scale = (self.max - self.min) / self.range;
			local b = self.base;
			b.scaleslider:SilentMove(self.scale);
			b.offsetslider:SilentMove(self.offset);
		}
		self:oldRedraw();
	};
/*	pl.OnDown = procedure(self, ev)
	{
		gui.SetCapture(self);
	};
	pl.OnUp = procedure(self, ev)
	{
		if(gui.GetCapture() != self)
			return;
		gui.SetCapture(nil);
		self:Invalidate();
		if self:Find(ev.(x, y)) == self
			print("milli!\n");
	};
*/
	// Control panel
	local cp = gui.Panel(bp, "none");
	cp.colrowratio = 1000;
	cp.colratio = vector [4, 1];

	  // Slider panel
	  local sp = gui.Panel(cp, "none");
	  sp.colrowratio = 0;

	    // Scale slider
	    local s, bp.scaleslider = gui.HSlider(sp,
			procedure(self, v) { self.base:Recalc(); },
			function(self, v) { return (1 - v) * (1 - v); },
			function(self, v) { return 1 - sqrt(v); });
	    s.base = bp;

	    // Offset slider
	    s, bp.offsetslider = gui.HSlider(sp,
			procedure(self, v) { self.base:Recalc(); },
			function(self, v) { return 2 * v - 1; },
			function(self, v) { return (v + 1) / 2; });
	    s:SilentMove(0);
	    s.base = bp;

	    // Fine offset slider
	    s, bp.fineoffsetslider = gui.HSlider(sp,
			procedure(self, v) { self.base:Recalc(); },
			function(self, v) { return .02 * v - .01; },
			function(self, v) { return (v + .01) / .02; });
	    s:SilentMove(0);
	    s.base = bp;
	
	  // Switch panel
	  sp = gui.Panel(cp, "none");
	  sp.colrowratio = 0;

	    // On/Off switch
	    local b = gui.Toggle(sp, "On",
			procedure(self)
			{
				local p = self.base.plotter;
				if self.pressed
				{
					self.caption = "On";
					p.Input = p.oldInput;
				}
				else
				{
					self.caption = "Off";
					p.Input = procedure(sl, v) {};
				}
				self:Invalidate();
			});
	    b.base = bp;

	    // Clear button
	    b = gui.Button(sp, "Clear",
			procedure(self)
			{
				local p = self.base.plotter;
				delete(p.data);
				p:Invalidate();
			});
	    b.base = bp;

	    // Reset button
	    b = gui.Button(sp, "Reset",
			procedure(self)
			{
				local ss, local os, local fos = self.base.
						(scaleslider, offsetslider,
						fineoffsetslider);
				ss:SilentMovePos(0);
				os:SilentMove(0);
				fos:Move(0);
			});
	    b.base = bp;

	    // Autoscale switch
	    b, bp.autobutton = gui.Button(sp, "Manual",
			procedure(self)
			{
				if self.caption != "Auto"
					self.caption = "Auto";
				else
					self.caption = "Manual";
				self.base:Recalc();
			});
	    b.base = bp;

	// Forward some stuff
	bp.Input = procedure(self, v)
			{
				self.plotter:Input(v);
			};
	bp.SetRound = procedure(self, v)
			{
				self.plotter.round = v;
			};

	bp:Recalc();
	return bp;
}


// Control with label, value text and slider
export function Control(parent, min, max, init, caption, onchange)
{
	local w = gui.Panel(parent);
	w.colrowratio = 0;
	w.OnChange = onchange;
	gui.Label(w, caption);
	w.vl = gui.Label(w, ".");
	w.s = gui.HSlider(w, procedure(self, v) { self.parent:OnChange(v); });
	w.SetRound = procedure(self, r)
	{
		self.s.round = r;
	};
	w:SetRound(.01);

	// Hook into SilentMovePos to update the display label
	w.s.SilentMovePos2 = w.s.SilentMovePos;
	w.s.SilentMovePos = procedure(self, _v)
			{
				local v = self:Pos2Value(_v);
				v = round(v, self.round);
				v = self:Value2Pos(v);
				self:SilentMovePos2(v);
				local l = self.parent.vl;
				l.caption = (string)self.value;
				l:Invalidate();
			};

	// Set range and initial value
	w.s:SetRange(min, max);
	w.s:SilentMove(init);

	// Forward the Slider API
	w.SilentMovePos = procedure(self, pos)
			{ self.s:SilentMovePos(pos); };
	w.MovePos = procedure(self, pos)
			{ self.s:MovePos(pos); };
	w.SilentMove = procedure(self, value)
			{ self.s:SilentMove(value); };
	w.Move = procedure(self, value)
			{ self.s:Move(value); };
	w.SetStep = procedure(self, coarse, wheel, fine)
			{ self.s:SetStep(coarse, wheel, fine); };
	w.SetStepPos = procedure(self, coarse, wheel, fine)
			{ self.s:SetStepPos(coarse, wheel, fine); };

	return w;
}


// Labeled numeric editor/display
export function NumEditor(parent, init, caption, onchange)
{
	local w = gui.Panel(parent);
	w.colrowratio = 0;
	w.OnChange = onchange;
	gui.Label(w, caption);
	w.value = init;
	w.ed = gui.LineEditor(w, (string)w.value, procedure(self, text)
			{
				local p = self.parent;
				p.value = (real)text;
				p:OnChange(p.value);
			});
	w.SetValue = procedure(self, v)
	{
		self.value = v;
		self.ed:SetText((string)v);
	};
	return w;
}



// Wraps gui.Root() and applies the Reologica color theme
export function Root()
{
	local g = gui.Root();
	g.theme:SetPassiveColors(64, 64, 64, 1);
	g.theme:SetActiveColors(128, 32, 32, 1.2);
	g.theme:SetMarkColor(200, 200, 0);
	return g;
}
