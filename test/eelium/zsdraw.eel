////////////////////////////////////////////////////
// zsdraw.eel - ZeeSpace authoring tool
// Copyright 2011, 2014, 2020 David Olofson
////////////////////////////////////////////////////

import math;
import SDL as SDL;
import ZeeSpace as zs;
import eelium.gui as gui;
import eelium.drawtools as dt;

constant HANDLESIZE = 10;

static screen;
static maintheme;
static alerttheme;
static askexit_up = false;
static do_exit = false;
static workspace;
static menubar;
static statusbar;

// View control
static viewctl;
static pitch = 90;

// Lighting control
static lightingctl;
static altitude = 45;
static shadowcast = true;
static shadowdepth = .5;
static shadowhard = .5;
static bumpmap = true;
static bumpdepth = .5;

// Entity list
static entitylist;
static selection = {};


procedure DeselectAll
{
	for local i = 0, sizeof selection - 1
		index(selection, i):Deselect();
}


// Entity types
//
// WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
//
//		Changing these breaks the file format!!!
//
// WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
//
constant ZSE_NONE = 0;
constant ZSE_BACKGROUND = 1;
constant ZSE_PIPE = 20;
constant ZSE_REGION = 30;
constant ZSE_DOME = 40;


// ZeeSpace pixel/color editor widget
//
// TODO:
//	* Color swatch!
//	* Global persistent "Recent colors" storage!
//	* Various alternate color spaces.
//
function ZSPixelEditor(parent, pixel, onchange)
{
	local wg = gui.Panel(parent, "thin");
	wg:SetSize(200, 6 * 18 + 4);
	wg.colrowratio = 0;
	wg.entity = parent.entity;
	wg.OnChange = onchange;
	gui.Control(wg, "R", 0, 255, 1, pixel.r, procedure(s, v)
			{
				s.parent.entity.pixel.r = v;
				s.parent:OnChange();
			});
	gui.Control(wg, "G", 0, 255, 1, pixel.g, procedure(s, v)
			{
				s.parent.entity.pixel.g = v;
				s.parent:OnChange();
			});
	gui.Control(wg, "B", 0, 255, 1, pixel.b, procedure(s, v)
			{
				s.parent.entity.pixel.b = v;
				s.parent:OnChange();
			});
	gui.Control(wg, "A", 0, 255, 1, pixel.a, procedure(s, v)
			{
				s.parent.entity.pixel.a = v;
				s.parent:OnChange();
			});
	gui.Control(wg, "I", 0, 2, .01, pixel.i, procedure(s, v)
			{
				s.parent.entity.pixel.i = v;
				s.parent:OnChange();
			});
	gui.Control(wg, "Z", 0, 255, .01, pixel.z, procedure(s, v)
			{
				s.parent.entity.pixel.z = v;
				s.parent:OnChange();
			});
	return wg;
}


// Widget property editor popup
function EntityEditor(entity, x, y, w, h)
{
	local win = gui.Popup(entity.widget.root, SDL.Rect [x, y, w, h])
			:SetAlign("stretch", 1);
	win.entity = entity;
	local p = gui.Panel(win, "none")
		:SetAlign("grid", 2, 1, [15, 1])
		:SetSize(200, 12);
	gui.DragBar(p, entity.name);
	gui.Button(p, "X", procedure(self)
			{
				self.root:Delete();
			}, "thin");
	return win;
}


procedure ShowEditor(e, x, y)
{
	if not e.Editor
		return;
//	local r = self.rect;
	if e.editor
//		e.editor:SetPosition(r.x + r.w, r.y);
		e.editor:SetPosition(x, y);
	else
//		e.editor (=) e:Editor(r.x + r.w, r.y);
		e.editor (=) e:Editor(x, y);
}


// Entity widget for logic entities; that is, those without position and size
//
// NOTE:
//	This becomes a root widget, which is why it's not affected by the
//	visibility of the overlay!
//
static logicwidgetx = 10;
static logicwidgety = 10;
function EntityWidgetLogic(parent, entity)
{
	local w = parent.font:Width(entity.name) + 20;
	local wg = gui.Popup(parent,
			SDL.Rect [logicwidgetx, logicwidgety, w, 20]);
	wg.entity = entity;
	entity.widget (=) wg;
	logicwidgety += 25;
	if logicwidgety > 400
	{
		logicwidgety = 10;
		logicwidgetx += 100;
	}
	local db = gui.DragBar(wg, entity.name, nil, procedure(self)
			{
				local e = self.parent.entity;
				local r = self.rect;
				ShowEditor(e, r.x + r.w, r.y);
			}, "flat");
	db.OnFocus = procedure(self, state)
	{
		if state
			self.parent.entity:Select();
//			self.parent.entity.canvas.selected = self.parent.entity;
	};
	return wg;
}


// Base widget for canvas entities
function EntityWidget(parent, entity)
{
	local wg = gui.Widget(parent);
	wg.entity = entity;
	entity.widget (=) wg;
	wg.button = nil;
	wg.handles = [];
	wg.DeleteHook = procedure(self)
	{
		for local i = 0, sizeof self.handles - 1
			self.handles[i]:Delete();
		delete(self.handles);
		self.DeleteHook = nil;
	};
	wg.OnDown = procedure(self, ev)
	{
		self.button = ev.button;
		gui.SetFocus(self);
	};
	wg.OnUp = procedure(self, ev)
	{
		if self.button != ev.button
			return;
		switch ev.button
		  case SDL.BUTTON_LEFT
		  {
			self:BringToFront();
			for local i = 0, sizeof self.handles - 1
				self.handles[i]:BringToFront();
		  }
		  case SDL.BUTTON_MIDDLE
		  {
			for local i = 0, sizeof self.handles - 1
				self.handles[i]:SendToBack();
			self:SendToBack();
		  }
		  case SDL.BUTTON_RIGHT
		  {
			local e = self.entity;
			if e.Editor
			{
				if e.editor
					e.editor:SetPosition(ev.(x, y));
				else
					e.editor (=) e:Editor(ev.(x, y));
			}
		  }
	};
	wg.OnFocus = procedure(self, state)
	{
		if state
			self.entity:Select();
//			self.entity.canvas.selected = self.entity;
	};
	return wg;
}


// Full canvas size background widget
/*
function EntityWidgetFull(parent, entity)
{
	local wg = EntityWidget(parent, entity);
	wg.Redraw = procedure(self)
	{
		// Hack to keep the widget covering the whole canvas
		self.rect.(x, y, w, h) = self.parent.rect.(x, y, w, h);
	};
	wg.OnUp = procedure(self, ev)
	{
		if self.button != ev.button
			return;
		switch ev.button
		  case SDL.BUTTON_RIGHT
		  {
			local e = self.entity;
			if e.Editor
			{
				if e.editor
					e.editor:SetPosition(ev.(x, y));
				else
					e.editor (=) e:Editor(ev.(x, y));
			}
		  }
	};
	return wg;
}
*/

// Entity widget for rectangular canvas entities
function EntityWidgetRect(parent, entity)
{
	local wg = EntityWidget(parent, entity);
	wg.pen = SDL.MapColor(gui.GetTarget(), 0, 0, 0);
	wg.Redraw = procedure(self)
	{
		local t = gui.GetTarget();
		local r = self.rect;
//		local f = gui.GetFocus();
//		if f == self or f == self.handles[0] or f == self.handles[1]
		if self.entity.selected
			self.theme:FocusBox(r);
		else
			dt.box(t, r, self.pen);
		local tx, local ty = r.(x, y) + 2;
		self.font:PutString((string)r.w + "x" + (string)r.h,
				tx, ty, t, r.x + r.w);
	};
	wg.DragTopLeft = procedure(self, x, y)
	{
		local r = clone self.logicrect;
		r.(w, h) -= (x, y) - r.(x, y);
		r.(x, y) = x, y;
		self:SetRect(r);
		self.entity:SetRect(r);
		self.handle[1]:Move(self.logicrect.(x, y) +
				self.logicrect.(w, h));
	};
	wg.DragBottomRight = procedure(self, x, y)
	{
		local r = clone self.logicrect;
		local w, local h = (x, y) - r.(x, y);
		if w < 0
			r.x += w;
		if h < 0
			r.y += h;
		r.(w, h) = w, h;	// Note: Clipped by SDL_Rect!
		self:SetRect(r);
		self.entity:SetRect(r);
		self.handles[0]:Move(self.logicrect.(x, y));
	};
	wg.handles[0] = gui.DragHandle(parent, 100, 100, 10, procedure(self, x, y)
		{
			self.widget:DragTopLeft(x, y);
		});
	wg.handles[1] = gui.DragHandle(parent, 200, 200, 10, procedure(self, x, y)
		{
			self.widget:DragBottomRight(x, y);
		});
	wg.handles[0, 1].widget (=) wg;
	wg.handles[0, 1].DeleteHook = procedure(self)
		{
			if self.widget
				self.widget:Delete();
		};
	return wg;
}


// Entity widget for circular canvas entities with height
function EntityWidgetXYRH(parent, entity)
{
	local wg = EntityWidget(parent, entity);
	wg.pen = SDL.MapColor(gui.GetTarget(), 0, 0, 0);
	wg.Redraw = procedure(self)
	{
		local t = gui.GetTarget();
		local r = self.rect;
//		local f = gui.GetFocus();
//		if f == self or f == self.handles[0] or f == self.handles[1]
		if self.entity.selected
			self.theme:FocusBox(r);
		else
			dt.box(t, r, self.pen);
		local tx, local ty = r.(x, y) + 2;
		self.font:PutString(
				"(" + (string)r.x + "," + (string)r.y + ") "
					+ (string)r.w + "x" + (string)r.h,
				tx, ty, t, r.x + r.w);
	};
	wg.RefitOutline = procedure(self)
	{
		local e = self.entity;
		local size = ceil(e.r * 2);
		local r = SDL.Rect [(e.(x, y) - e.r), size, size];
		self:SetRect(r);
	};
	wg.DragCenter = procedure(self, x, y)
	{
		local e = self.entity;
		self.handles[1]:MoveRel((x, y) - e.(x, y));
		e.(x, y) = x, y;
		e.canvas:Invalidate();
		self:RefitOutline();
	};
	wg.DragRadius = procedure(self, x, y)
	{
		local e = self.entity;
		x, y -= e.(x, y);
		e.r = sqrt(x*x + (y*y));
		e.canvas:Invalidate();
		self:RefitOutline();
	};
	wg.handles[0] = gui.DragHandle(parent, entity.(x, y), 10,
			procedure(self, x, y)
			{
				self.widget:DragCenter(x, y);
			});
	wg.handles[1] = gui.DragHandle(parent, entity.x + entity.r, entity.y, 10,
			procedure(self, x, y)
			{
				self.widget:DragRadius(x, y);
			});
	wg.handles[0, 1].widget = wg;
	wg:RefitOutline();
	return wg;
}


  //////////////////////////////////////////////////////////
 // Entities
//////////////////////////////////////////////////////////

// Entity base class
function Entity(canvas, name)
{
	local e = {
		.name		name,	// Name of entity
		.editor		nil,	// Editor popup, if shown
		.item		nil,	// Entity list item, if present
		.selected	false,	// Entity is selected

		procedure Select(self)
		{
			DeselectAll();
			self.selected = true;
			selection[self] = self;
			self:Invalidate();
		}

		procedure Deselect(self)
		{
			self.selected = false;
			try
				delete(selection, self);
			self:Invalidate();
		}

		// Ensure that the entity is redrawn
		procedure Invalidate(self)
		{
			self.canvas.needs_rebuild = true;
			self.canvas.widget:Invalidate();
			self.widget:Invalidate();
		}

		// Render to canvas surface!
		procedure Render(self, surface)
		{
		}

		// Create property editor popup at (x, y)
		//procedure Editor(self, x, y)
		.Editor		nil,

		// Create a canvas widget for selection and manipulation
		//function Widget(self, parent)
		.Widget		nil,

		// Create widget list item widget as child of 'parent'
		procedure Item(self, parent)
		{
			self.item = gui.Button(parent, self.name,
				procedure(ss)
				{
					if ss.button == SDL.BUTTON_RIGHT
					{
						local r = ss.rect;
						ShowEditor(ss.entity,
								r.x + r.w, r.y);
					}
					else
						ss.entity:Select();
				}, "flat");
			self.item.entity (=) self;
		}

		// Return an array defining the entity
		function Serialize(self)
		{
			return [
				ZSE_NONE	// Entity type
			];
		}

		procedure Delete(self)
		{
print("Entity:Delete()\n");
			try
				delete(selection, self);
			local ent = self.canvas.entities;
			for local i = 0, sizeof ent - 1
				if ent[i] == self
				{
					delete(ent, i);
					break;
				}
			if self.widget
{
print("  Entity.self.widget:Delete()\n");
				self.widget:Delete();
}
			if self.editor
				self.editor:Delete();
			if self.item
				self.item:Delete();
			self.canvas:Invalidate();
			self.canvas.widget:Invalidate();
		}
	};
	return e;
}

// Plain, full canvas background
//
// NOTE:
//	There can be only one of these, and it will always be the first entity!
//	Creating a new one will actually just reset the existing instance.
//
function Background(canvas)
{
	if canvas.background
		local e = canvas.background;
	else
		canvas.background, e = Entity(canvas, "Background");
	e.pixel = zs.ZS_Pixel [128, 128, 128, 255, 1, 0];
	e.Render = procedure(self, surface)
	{
		zs.RawFill(zs.ALL, surface, nil, self.pixel);
	};
	e.Editor = function(self, x, y)
	{
		local p = EntityEditor(self, x, y, 200, 100);
		ZSPixelEditor(p, self.pixel, procedure(s)
				{
					s.entity:Invalidate();
				});
		return p;
	};
	e.Widget = function(self, parent)
	{
		return EntityWidgetLogic(parent, self);
//		return EntityWidgetFull(parent, self);
	};
	e.Serialize = function(self)
	{
		return [
			ZSE_BACKGROUND,
			self.pixel
		];
	};
	canvas:AddEntity(e);
	return e;
}

// Pipe field selector widget
function PipeSelector(parent, field)<caption, value>
{
	local sel = gui.Selector(parent, "radio",
			procedure(self, value) {
				self.entity[self.field] = value;
				self.entity:Invalidate();
			});
	sel.entity = parent.entity;
	sel.field = field;
	for local i = 0, tuples - 1
		sel:AddItems(caption[i], value[i]);
	sel:SetSize(200, sizeof sel.widgets * 12 + 2);
	sel:SelectByValue(sel.entity[field]);
	return sel;
}

function Pipe(canvas)
{
	local e = Entity(canvas, "Pipe");
	e.z = zs.Z_NORMAL;
	e.zb = zs.ZB_ABOVE;
	e.color = zs.C_NORMAL;
	e.alpha = zs.A_FIXED;
	e.a = 1.;
	e.intensity = zs.I_FIXED;
	e.i = 1.;
//	e.write = zs.CW_RGB | zs.AW_OFF | zs.IW_OFF | zs.ZW_ON;
	e.cw = zs.CW_RGB;
	e.aw = zs.AW_ADD;
	e.iw = zs.IW_COPY;
	e.zw = zs.ZW_ON;
	e.Render = procedure(self, surface)
	{
		local p = self.canvas.pipe;
		zs.PipeZ(p, self.z | self.zb);
		zs.PipeColor(p, self.color);
		zs.PipeAlpha(p, self.(alpha, a));
		zs.PipeIntensity(p, self.(intensity, i));
		zs.PipeWrite(p, self.cw | self.aw | self.iw | self.zw);
	};
	e.Editor = function(self, x, y)
	{
		local p = EntityEditor(self, x, y, 200, 200);
		gui.Label(p, "Z Transform"):SetSize(200, 12);
		PipeSelector(p, "z",
			"NORMAL",	zs.Z_NORMAL,
			"ADD",		zs.Z_ADD,
			"SUBTRACT",	zs.Z_SUBTRACT,
			"MULTIPLY",	zs.Z_MULTIPLY
		);
		PipeSelector(p, "zb",
			"ALL",		zs.ZB_ALL,
			"ABOVE",	zs.ZB_ABOVE,
			"BELOW",	zs.ZB_BELOW
		);

		gui.Label(p, "Color Transform"):SetSize(200, 12);
		local sel = PipeSelector(p, "color",
			"NORMAL",	zs.C_NORMAL,
			"ADD",		zs.C_ADD,
			"SUBTRACT",	zs.C_SUBTRACT,
			"MULTIPLY",	zs.C_MULTIPLY,
			"DIVIDE",	zs.C_DIVIDE,
			"LIGHTEN",	zs.C_LIGHTEN,
			"DARKEN",	zs.C_DARKEN,
			"CONTRAST",	zs.C_CONTRAST,
			"INVERT",	zs.C_INVERT,
			"HUE",		zs.C_HUE,
			"SATURATE",	zs.C_SATURATE,
			"COLOR",	zs.C_COLOR,
			"VALUE",	zs.C_VALUE
		);
		for local i = 4, sizeof sel.widgets - 1
			sel.widgets[i]:Disable();

		gui.Label(p, "Alpha Transform"):SetSize(200, 12);
		PipeSelector(p, "alpha",
			"FIXED",	zs.A_FIXED,
			"SOURCE",	zs.A_SOURCE,
			"DEST",		zs.A_DEST
		);
		gui.Control(p, "A", 0, 1, .01, self.a,
				procedure(s, v)
				{
					s.parent.entity.a = v;
					s.parent.entity:Invalidate();
				}):SetSize(200, 18);

		gui.Label(p, "Intensity Transform"):SetSize(200, 12);
		PipeSelector(p, "intensity",
			"FIXED",	zs.I_FIXED,
			"SOURCE",	zs.I_SOURCE,
			"DEST",		zs.I_DEST
		);
		gui.Control(p, "I", 0, 2, .01, self.i,
				procedure(s, v)
				{
					s.parent.entity.i = v;
					s.parent.entity:Invalidate();
				}):SetSize(200, 18);

		gui.Label(p, "Write Modes"):SetSize(200, 12);
///////////////////////////////////
		PipeSelector(p, "aw",
			"OFF",		zs.AW_OFF,
			"COPY",		zs.AW_COPY,
			"ADD",		zs.AW_ADD,
			"SUBTRACT",	zs.AW_SUBTRACT,
			"MULTIPLY",	zs.AW_MULTIPLY
		);
		PipeSelector(p, "iw",
			"OFF",		zs.IW_OFF,
			"COPY",		zs.IW_COPY,
			"ADD",		zs.IW_ADD,
			"SUBTRACT",	zs.IW_SUBTRACT,
			"MULTIPLY",	zs.IW_MULTIPLY,
			"BLEND",	zs.IW_BLEND
		);
		return p;
	};
	e.Widget = function(self, parent)
	{
		return EntityWidgetLogic(parent, self);
	};
	e.Serialize = function(self)
	{
		return [
			ZSE_PIPE,
			self.z | self.zb,
			self.(	color,
				alpha, a,
				intensity, i),
			self.cw | self.aw | self.iw | self.zw
		];
	};
	canvas:AddEntity(e);
	return e;
}

function Dome(canvas)[x, y, r, h, px]
{
	local e = Entity(canvas, "Dome");
	e.(x, y, r, h) = 100;
	e.pixel = zs.ZS_Pixel [128, 128, 128, 255, 1, 0];
	e.Render = procedure(self, surface)
	{
		local p = self.canvas.pipe;
		zs.Dome(p, surface, self.(x, y, r, h, pixel));
	};
	e.Editor = function(self, x, y)
	{
		local p = EntityEditor(self, x, y, 200, 100);
		gui.Control(p, "Height", 0, 255, .001 /* 1/256 */, self.h,
				procedure(s, v)
				{
					s.parent.entity.h = v;
					s.parent.entity:Invalidate();
				}):SetSize(200, 18);
		ZSPixelEditor(p, self.pixel, procedure(s)
				{
					s.entity:Invalidate();
				});
		return p;
	};
	e.Widget = function(self, parent)
	{
		return EntityWidgetXYRH(parent, self);
	};
	e.Serialize = function(self)
	{
		return [
			ZSE_DOME,		// Entity type
			self.(x, y, r, h),	// Pos and size
			self.pixel		// Color + z
		];
	};
	if specified x
		e.x = x;
	if specified y
		e.y = y;
	if specified r
		e.r = r;
	if specified h
		e.h = h;
	if specified px
		e.pixel = clone px;
	canvas:AddEntity(e);
	return e;
}


// Workspace widget
function Workspace(parent)
{
	local w = gui.Panel(parent, "none");
	w.Redraw = procedure(self)
		{
			local tg = gui.GetTarget();
			local c = self.canvas;
			local r = self.rect;
print("Workspace:Redraw(), ", r.x, ", ", r.y, " - ", r.w, "x", r.h, "\n");
			local dark = SDL.MapColor(tg, 32, 32, 32);
			local bright = SDL.MapColor(tg, 64, 64, 64);
			local rect = SDL.Rect [];
			for local y = 0, r.h, 32
				for local x = 0, r.w, 32
				{
					rect.(x, y, w, h) = x, y, 32, 32;
					rect.(x, y) += r.(x, y);
					if (integer)(x + y) & 32
						SDL.FillRect(tg, rect, bright);
					else
						SDL.FillRect(tg, rect, dark);
				}
			if (r.w != c.w) or (r.h != c.h)
				c:Resize(self.rect.(w, h));
			c:Present(tg);
		};
//	w.Invalidate = procedure(s) { s.parent:Invalidate(); };
	w.canvas = {
		.background	nil,	// Special handling for this...
		.entities	[],
		.needs_rebuild	true,
		.pipe		zs.ZS_Pipe [],
		.Background	Background,
		.Pipe		Pipe,
		.Dome		Dome,
		procedure Render(self)
		{
			local s = self.work;
			zs.RawFill(zs.ALL, s, nil, zs.ZS_Pixel []);
			local e = self.entities;
			for local i = 0, sizeof e - 1
				e[i]:Render(s);
///////////////////////
/*
local p = zs.ZS_Pipe [];
zs.PipeZ(p, zs.Z_NORMAL | zs.ZB_ALL);
for local i = 0, 1000, 10
{
	zs.Blit(p, s, zs.ZS_Rect [0, 0, 200, 200], s,
			zs.RndGet(1000) - 500,
			zs.RndGet(1000) - 500);
}
*/
///////////////////////
		}
		procedure Light(self)
		{
			local s = self.light;
			zs.RawCopy(zs.ALL, self.work, nil, s, 0, 0);
			if shadowcast
				zs.SimpleShadow(s, altitude, 1, shadowdepth,
						shadowhard);
			if bumpmap
				zs.BumpMap(s, altitude, 1, bumpdepth);
			zs.ApplyIntensity(s);
		}
		procedure Rebuild(self)
		{
			self:Render();
			self:Light();
			self.needs_rebuild = false;
		}
		procedure Present(self, target)
		{
			if self.needs_rebuild
				self:Rebuild();
			if pitch == 90
				zs.Blit2SDL(self.light, target, true);
			else
				zs.Render3D2SDL(self.light, target, pitch);
		}
		procedure Invalidate(self)
		{
			self.needs_rebuild = true;
		}
		procedure Resize(self, w, h)
		{
			self.(w, h) = w, h;
			self.work = zs.ZS_Surface [w, h];
			self.light = zs.ZS_Surface [w, h];
			self:Invalidate();
		}
		procedure AddEntity(self, entity)
		{
			entity.canvas (=) self;
			self.entities.+ entity;
			self:Invalidate();
			if entity.Widget
			{
				local ewg = entity:Widget(self.overlay);
				ewg.entity = entity;
				entity.widget (=) ewg;
			}
			entitylist:Add(entity);
		}
	};
	w.canvas.widget (=) w;
	w.canvas.overlay (=) gui.Panel(w, "none"):SetAlign("relative");
	w.canvas:Resize(10, 10);
	w.canvas:Render();
	return w;
}


function EntityList(root)
{
	local win = gui.Popup(root, SDL.Rect [300, 100, 150, 400]);
	win:SetAlign("grid", 1, 2, nil, [1, 20]);
	gui.DragBar(win, "Entities");
	local body = gui.Panel(win, "none"):SetAlign("grid", 2, 1, [10, 1]);
	local lb, win.listbox = gui.ListBox(body);
//for local i = 0, 30 gui.Button(lb, "Item " + (string)i);
	local sl = gui.VSlider(body,
			procedure (self, v)
			{
				self.listbox:SetScrollPos(v);
			});
	sl.listbox = lb;
	win.Add = procedure(self, entity)
	{
		entity:Item(self.listbox);
	};
	return win;
}


function ViewControl(root)
{
	local win = gui.Popup(root, SDL.Rect [100, 100, 100, 100]);
	gui.DragBar(win, "View");
	gui.Label(win, "Pitch");
	gui.HSlider(win, procedure(self, v)
			{
				pitch = 90 - (v * 90);
				workspace:Invalidate();
			});
//	win:AutoSize(100, 20);
	return win;
}


function LightingControl(root)
{
	local win = gui.Popup(root, SDL.Rect [200, 100, 100, 100]);
	gui.DragBar(win, "Lighting");
	win.elabel = gui.Label(win, "Altitude");
	gui.HSlider(win, procedure(self, v)
			{
				altitude = floor(90 - (v * 90));
				self.parent.elabel:SetCaption("Altitude (" +
						(string)altitude + ")");
				workspace.canvas:Light();
				workspace:Invalidate();
			}):Move((90 - altitude) / 90);
	gui.Toggle(win, "Shadowcast", procedure(self)
			{
				shadowcast = self.state;
				workspace.canvas:Light();
				workspace:Invalidate();
			});
	gui.Label(win, "Depth");
	gui.HSlider(win, procedure(self, v)
			{
				shadowdepth = v;
				workspace.canvas:Light();
				workspace:Invalidate();
			}):Move(shadowdepth);
	gui.Label(win, "Hardness");
	gui.HSlider(win, procedure(self, v)
			{
				shadowhard = v;
				workspace.canvas:Light();
				workspace:Invalidate();
			}):Move(shadowhard);
	gui.Toggle(win, "Bumpmap", procedure(self)
			{
				bumpmap = self.state;
				workspace.canvas:Light();
				workspace:Invalidate();
			});
	gui.Label(win, "Depth");
	gui.HSlider(win, procedure(self, v)
			{
				bumpdepth = v;
				workspace.canvas:Light();
				workspace:Invalidate();
			}):Move(bumpdepth);
//	win:AutoSize(100, 20);
	return win;
}


procedure ask_exit
{
	if askexit_up
		return;
	askexit_up = true;
	gui.AlertBox(alerttheme, "Quit", "Really quit?",
		"Yes",	procedure(self)
			{
				do_exit = true;
				askexit_up = false;
			},
		"No",	procedure(self)
			{
				askexit_up = false;
			}
	);
}


export function main<args>
{
	local bpp = 0;
	local flags = SDL.SWSURFACE | SDL.RESIZABLE;
	screen = SDL.SetVideoMode(800, 600, bpp, flags);
	SDL.EnableKeyRepeat(250, 30);
	SDL.SetCaption("ZSDraw - ZeeSpace Editor", args[0]);

	// Set up GUI themes
	local th, maintheme = gui.DefaultTheme();
	th:SetActiveColors(60, 70, 80, 1.7);
	th:SetPassiveColors(30, 35, 40, 1.0);
	th:SetMarkColor(255, 192, 0);

	th, alerttheme = gui.DefaultTheme();
	th:SetActiveColors(160, 64, 64, 1.7);
	th:SetPassiveColors(80, 32, 32, 1.0);
	th:SetMarkColor(255, 192, 0);

	// Initialize GUI
	gui.Open(screen, maintheme);

	// Root
	local r = gui.Root();
	r.colrowration = 0;
	r.rowratio = vector [-20, 1, -20];

	// Menu bar
	menubar = gui.Panel(r, "flat");

	// Mid section (workspace, tool panel etc)
	local g = gui.Panel(r, "flat");
	g.colrowratio = 1000;
	g.colratio = vector [25, -100];

	// Status bar
	statusbar = gui.Panel(r, "flat");

	// Workspace/canvas
	workspace = Workspace(gui.Panel(g, "depression"));

	// Tool panel
	local sb = gui.Panel(g, "flat")
		:SetAlign("grid", 1, 25);
	sb.colrowratio = 0;
	gui.Button(sb, "Clear All", procedure(self)
			{
				gui.AlertBox(alerttheme, "Clear",
					"Clear everything?",
					"Yes",	procedure(s)
						{
						},
					"No",	nil);
			});

	gui.Label(sb, "Windows");
	gui.Toggle(sb, "Entities", procedure(self)
			{
				entitylist:Show(self.state);
			});
	gui.Toggle(sb, "View", procedure(self)
			{
				viewctl:Show(self.state);
			});
	gui.Toggle(sb, "Lighting", procedure(self)
			{
				lightingctl:Show(self.state);
			});

	gui.Label(sb, "Display");
	gui.Toggle(sb, "Handles", procedure(self)
			{
				workspace.canvas.overlay:Show(self.state);
			});

	entitylist = EntityList(g);
	viewctl = ViewControl(g);
	lightingctl = LightingControl(g);

	gui.Label(sb, "Pipeline");
	gui.Button(sb, "Pipe", procedure(self)
			{
				workspace.canvas:Pipe();
				workspace:Invalidate();
			});
	gui.Button(sb, "Region");

	gui.Label(sb, "Entities");
	gui.Button(sb, "Block");
	gui.Button(sb, "Polygon");
	gui.Button(sb, "Bezier Shape");
	gui.Button(sb, "Cylinder");
	gui.Button(sb, "Cone");
	gui.Button(sb, "Beehive");
	gui.Button(sb, "Dome", procedure(self)
			{
				workspace.canvas:Dome();
				workspace:Invalidate();
			});

	gui.Label(sb, "Textures");
	gui.Button(sb, "Fill");
	gui.Button(sb, "PerlinTerrain");

	gui.Label(sb, "Special FX");
	gui.Button(sb, "Water");
	gui.Button(sb, "Fog");

//==============================================================
	// Throw in some entities...
	local canvas = workspace.canvas;
	canvas:Background();
	local e = canvas:Pipe();
	local px = zs.ZS_Pixel [128, 128, 128, 255, 1, 0];
	for local i = 0, 7
	{
		px.r = 64 * ((integer)i & 1) + 64;
		px.g = 64 * ((integer)i & 2 >> 1) + 64;
		px.b = 64 * ((integer)i & 4 >> 2) + 64;
		canvas:Dome(cos(i * 2 * PI / 8) * 100 + 225,
				sin(i * 2 * PI / 8) * 100 + 350,
				100, 100, px);
	}
	px.(r, g, b) = 128;
	px.z = 50;
	canvas:Dome(525, 125, 100, 100, px);

/*
	local r = zs.ZS_Region [];
	for local y = -150, 150, 99.8
		for local x = -150, 150, 99.8
			zs.RegionRect(r, 225 + x - 25,
					350 + y - 25, 50, 50,
					zs.UNION);
	px.(r, g, b, z) = 160, 160, 160, 10;
	zs.PipeZ(p, zs.Z_SUBTRACT | zs.ZB_BELOW);
	zs.Fill(p, r, s, px);
*/
//==============================================================

	while not do_exit
	{
		local ev = SDL.PollEvent();
		if not ev
		{
			local dr = array [];
			gui.Refresh(dr);
			if sizeof dr
				SDL.Update(dr);
			ev = SDL.WaitEvent();
		}
		switch ev.type
		  case SDL.KEYDOWN
		  {
			switch ev.sym
/*			  case SDL.KF1, SDL.KF2, SDL.KF3, SDL.KF4,
					SDL.KF5, SDL.KF6, SDL.KF7,
					SDL.KF8, SDL.KF9, SDL.KF10,
					SDL.KF11
				spawn(ev.sym - SDL.KF1);
			  case SDL.KF12
			  	spawn(last_tick);*/
			  case SDL.KDELETE
				while sizeof selection
					index(selection, 0):Delete();
			  default
				gui.Dispatch(ev);
		  }
		  case SDL.VIDEOEXPOSE
			gui.Invalidate();
		  case SDL.VIDEORESIZE
		  {
			screen = SDL.SetVideoMode(ev.w, ev.h, bpp, flags);
			r:SetSize(ev.(w, h));
			gui.Invalidate();
		  }
		  case SDL.QUIT
			ask_exit();
		  default
			gui.Dispatch(ev);
	}

	DeselectAll();
	maintheme, alerttheme, viewctl, lightingctl = nil;
	menubar, workspace, statusbar = nil;
	gui.Close();
	return 0;
}
