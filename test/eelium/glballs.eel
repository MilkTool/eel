///////////////////////////////////////////////
// glballs.eel - Eelium Balls - OpenGL version
// Copyright 2010, 2014 David Olofson
///////////////////////////////////////////////

import SDL as SDL;
import OpenGL;
import math;
import ball as ball;


procedure resize(w, h)
{
	Viewport(0, 0, w, h);

	MatrixMode(PROJECTION);
	LoadIdentity();
//	Perspective(45, w / h, .1, 100);
	if w > h
		local ow, local oh = w / h, 1;
	else
		ow, oh = 1, h / w;
	Frustum(-ow, ow, -oh, oh, 1, 10);

	MatrixMode(MODELVIEW);
	LoadIdentity();
}


export function main<args>
{
	local nballs = 200;
	local bpp = 0;
	local flags = SDL.OPENGL | SDL.RESIZABLE;
	Load();
	Exceptions(true);
	SetAttribute(DOUBLEBUFFER, true);
	SetAttribute(SWAP_CONTROL, false);
	local screen = SDL.SetVideoMode(640, 480, bpp, flags);
	SDL.SetCaption("Eelium OpenGL Balls", args[0]);

	// Generate sprite graphics
	local tex = UploadTexture(ball.render(64));
	TexParameter(TEXTURE_2D, TEXTURE_MAG_FILTER, LINEAR);
	TexParameter(TEXTURE_2D, TEXTURE_MIN_FILTER, LINEAR);

	ShadeModel(SMOOTH);
	ClearColor(0, 0, 0, 0);
	Disable(DEPTH_TEST);
	Disable(CULL_FACE);
	Hint(PERSPECTIVE_CORRECTION_HINT, NICEST);

	resize(screen.(w, h));

	// Main loop
	local start, local lt, local t0 = SDL.GetTicks();
	local frames = 0;
	while true
	mainloop:
	{
		local t = SDL.GetTicks() - start;

		// Handle events
		while true
		{
			local ev = SDL.PollEvent();
			if not ev
				break;
			switch ev.type
			  case SDL.KEYUP
				if ev.sym == SDL.KESCAPE
					break mainloop;
			  case SDL.MOUSEBUTTONUP, SDL.QUIT
				break mainloop;
			  case SDL.VIDEORESIZE
			  {
				screen = SDL.SetVideoMode(10 >| ev.w,
						10 >| ev.h, bpp, flags);
				resize(screen.(w, h));
			  }
		}

		// Clear screen
		Clear(COLOR_BUFFER_BIT);

		// Render sprites
		local stx, local sty, local stz = t / (1000, 1400, 400);
		if screen.w > screen.h
			local sx, local sy = screen.w / screen.h, 1;
		else
			sx, sy = 1, screen.h / screen.w;
		LoadIdentity();
		Translate(0, 0, -3.1);
		Scale(1, 1, 2);
		BlendFunc(SRC_ALPHA, ONE_MINUS_SRC_ALPHA);
		Enable(BLEND);
		Enable(TEXTURE_2D);
		BindTexture(TEXTURE_2D, tex);
		Begin(QUADS);
		for local i = 0, nballs - 1
		{
			stx, sty, stz += .07, .09, .15;
			local x = sx * cos(stx);
			local y = sy * sin(sty);
			local z = sin(stz);
			local c = .45 * z + .55;
			Color(c, c, c);
			TexCoord(0, 1);
			Vertex(x - .1, y - .1,  z);
			TexCoord(1, 1);
			Vertex(x + .1, y - .1,  z);
			TexCoord(1, 0);
			Vertex(x + .1, y + .1,  z);
			TexCoord(0, 0);
			Vertex(x - .1, y + .1,  z);
		}
		End();

		// Make changes visible
		SwapBuffers();

		// Frame rate calculation
		frames += 1;
		local tn = SDL.GetTicks();
		local dt = .001 * (tn - lt);
		lt = tn;
		if(tn - t0 >= 5000)
		{
			dt = (tn - t0) / 1000.;
			print(frames, " frames in ", dt, " s ==> ", frames / dt,
					" fps\n");
			t0 = tn;
			frames = 0;
		}

		// ...in case we don't have retrace sync
		SDL.Delay(0);
	}
	return 0;
}
